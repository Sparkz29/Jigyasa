{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nJIGYASA.AI is a pilot-ready AI Tutor Platform with dual interfaces for teachers and students. The platform features grade-adaptive learning, Socratic questioning methodology, and a safe \"walled garden\" knowledge base controlled by teachers. Teachers create virtual classrooms and manage curriculum materials, while students receive personalized AI tutoring based on approved content. Built with modern web technologies and powered by Google Gemini AI for cost-effective, scalable education solutions.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\nPlatform name: JIGYASA.AI with subtitle \"Artificial Intelligence that builds Real Intelligence\"\nDesign inspiration: SchoolAI.com for modern, safe learning environment aesthetics\nKey focus areas: Teacher control, student safety, grade-adaptive responses, Socratic questioning\n\n# System Architecture\n\n## Frontend Architecture\nThe frontend is built with React and TypeScript, following a modern component-based architecture:\n\n- **Framework**: React with TypeScript for type safety\n- **Routing**: Wouter for lightweight client-side routing\n- **UI Library**: Radix UI components with shadcn/ui design system\n- **Styling**: Tailwind CSS with CSS custom properties for theming\n- **State Management**: TanStack Query for server state management\n- **Build Tool**: Vite for fast development and optimized builds\n\nThe application uses a single-page layout with conditional rendering between file upload and chat interface states. The UI follows a clean, minimalist design with responsive breakpoints for mobile devices.\n\n## Backend Architecture\nThe backend follows a Node.js/Express architecture with TypeScript:\n\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules\n- **API Design**: RESTful endpoints with structured error handling\n- **File Processing**: Multer for file uploads with PDF validation\n- **Document Processing**: PDF parsing and text chunking for RAG implementation\n\nThe server implements middleware for request logging, JSON parsing, and development-specific features like Vite integration for hot reloading.\n\n## Data Storage Solutions\nThe application uses a comprehensive PostgreSQL-based storage architecture:\n\n- **Database**: PostgreSQL with Drizzle ORM for type-safe database operations\n- **Authentication**: Replit OAuth integration with session-based authentication\n- **Multi-tenancy**: Role-based access control (Teachers, Students, Admin roles)\n- **Classroom System**: Teachers create classrooms with unique invite codes for student enrollment\n- **Document Management**: PDF upload and processing with classroom-scoped access controls\n- **Chat Persistence**: Conversation sessions and message history per classroom\n- **Vector Store**: Custom in-memory vector storage for document embeddings with classroom isolation\n\nThe storage layer implements proper foreign key relationships, cascading deletes, and indexing for optimal performance across the multi-user education platform.\n\n## AI Integration Architecture\nThe application integrates with Google's Gemini API for educational AI capabilities:\n\n- **LLM**: Gemini 2.5 Flash and Pro models for grade-adaptive chat responses\n- **Embeddings**: Gemini text-embedding-004 for document vectorization\n- **RAG Pipeline**: Custom retrieval-augmented generation using classroom-specific vector stores\n- **Socratic Method**: AI prompts designed to ask guiding questions rather than provide direct answers\n- **Grade Adaptation**: Dynamic language complexity adjustment based on student grade levels (K-12)\n- **Safety Controls**: \"Walled garden\" approach using only teacher-approved curriculum materials\n- **Free Tier**: Uses Google AI Studio's generous free tier (15 requests/minute)\n\nThe AI service implements educational best practices with conversation history tracking and source citation for all responses. Updated January 2025 for multi-user education platform with role-based access control.\n\n## Document Processing Pipeline\nThe application implements a sophisticated document processing workflow:\n\n1. **Upload Validation**: File type and size validation (PDF only, 10MB limit)\n2. **Text Extraction**: PDF parsing using pdf-parse library\n3. **Text Chunking**: Intelligent text splitting with overlap for context preservation\n4. **Vectorization**: Embedding generation for each text chunk\n5. **Storage**: Persistent storage of chunks with metadata and embeddings\n\n## External Dependencies\n\n- **Google Gemini API**: For LLM chat completions and text embeddings (free tier)\n- **Neon Database**: PostgreSQL hosting service (configured but can fall back to other providers)\n- **PDF Processing**: pdf-parse library for extracting text from PDF documents\n- **Radix UI**: Comprehensive set of accessible UI components\n- **TanStack Query**: Powerful data synchronization library for React\n- **Drizzle ORM**: Type-safe SQL toolkit and ORM\n- **Vite**: Next-generation frontend build tool\n- **Tailwind CSS**: Utility-first CSS framework\n\nThe application is designed to be flexible with database providers and can easily switch between different PostgreSQL services or local databases through environment configuration.","size_bytes":5195},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"attached_assets/content-1756047869634.md":{"content":"Products\n\nSolutions\n\nResources\n\n[Pricing](https://schoolai.com/pricing)\n\n[Space code](https://student.schoolai.com/dot/spaces/join) [Sign In](https://app.schoolai.com/sign-up)\n\n[Get a demo](https://schoolai.com/demo)\n\nSchoolAI for…\n\n[Teachers](https://schoolai.com/teachers) [School Leaders](https://schoolai.com/school-leaders) [Coaches](https://schoolai.com/coaches) [Students](https://schoolai.com/students) [Higher Ed](https://schoolai.com/higher-education) [Other](https://schoolai.com/)\n\n# Empower every learner,\n\n# support every educator\n\nA trusted AI platform loved by teachers and made to support every learner\n\n![Dot, the SchoolAI assistant.](https://framerusercontent.com/images/Ogj8IGRKDxJ14DdZP2C5G7U7hU.png)\n\nFree for teachers\n\n## \"I want to support learning, but I need tools that actually work.\"\n\n- ![](https://framerusercontent.com/images/zbu4CR8hXAoo17lziSgoLKCR2Lw.svg)\n\n- ![](https://framerusercontent.com/images/zbu4CR8hXAoo17lziSgoLKCR2Lw.svg)\n\n- ![](https://framerusercontent.com/images/zbu4CR8hXAoo17lziSgoLKCR2Lw.svg)\n\n\n## Flexible AI built for classrooms.\n\nUsed in over 1 million classrooms\n\n![The SchoolAI \"My Space\" page, where users can begin a chat with Dot.](https://framerusercontent.com/images/QtS3ttWswvA7Fx1PGZeXayoawCQ.png?scale-down-to=1024)\n\nMeet every student where they are.\n\nQuickly personalize learning experiences to each student's speed, style, and struggles.\n\nAdministrate less.\n\nInspire more.\n\nCreate lesson plans, rubrics, assessments, and more in minutes, not hours.\n\nGiving back 10+ hours/week\n\nSee the struggle before they're behind\n\nSee who's struggling in real-time so you know exactly how to help.\n\nFree for teachers\n\n![](https://framerusercontent.com/images/SUAbfSwvZ20SwVW8pvRaVA3NuM.png)\n\nFor Students\n\nOver 60 languages supported\n\n## A\n\n## powerful\n\n## learning\n\n## assistant\n\nDot, our AI assistant, guides students through interactive workspaces, adapting to how they learn and ensuring they understand key concepts before moving on.\n\n[![](https://framerusercontent.com/images/Ogj8IGRKDxJ14DdZP2C5G7U7hU.png)\\\\\n\\\\\nTry a chat with Dot](https://app.schoolai.com/dot/spaces/my-space)\n\nFor Teachers\n\n## Real-time student\n\n## progress\n\nSee every student's progress in real-time, with instant insight into what they know, where they're struggling, and how to help, so you can step in right when it matters most.\n\n[Learn more](https://schoolai.com/products/mission-control)\n\nFor Teachers\n\n## Unlimited\n\n## creation\n\nCreate interactive lessons that meet your desired learning outcomes and boost student engagement. The only limit is your imagination.\n\n[Create a Space](https://app.schoolai.com/create)\n\nFor Teachers\n\n## Browser\n\n## extension\n\nSchoolAI's Chrome extension puts AI directly in Google Docs and around the internet. Create, differentiate, and enhance without ever switching screens.\n\n[Learn more](https://schoolai.com/products/chrome-extension)\n\nFor Teachers\n\nOver 200,000 Spaces\n\n## Space\n\n## library\n\nUse one of over 200,000 Spaces created by other teachers like you. Discover classroom-tested lessons, adapt them to your classroom, and share what works.\n\n[Explore](https://app.schoolai.com/discover)\n\nFor Teachers\n\nGiving back 10+ hours/week\n\n## Productivity\n\n## tools\n\nFrom lesson planning to student assessment, district oversight to parent communication. Professional-grade tools that handle every part of your educational workflow.\n\n[Explore](https://app.schoolai.com/tools)\n\n## Teacher- monitored\n\n## student safe\n\nSchoolAI is built to immediately alert you to critical safety concerns like bullying, abuse, or neglect.\n\n[Learn more](https://schoolai.com/products/mission-control)\n\n## You set\n\n## the rules\n\nSchoolAI is built to keep you in the drivers seat. You decide what students can and can't do, and it follows your instructions.\n\n[Create a Space](https://app.schoolai.com/create)\n\n![Headshots of a diverse group of educators in a grid.](https://framerusercontent.com/images/IJqdinXC7KWPLX5Qteo3G3qg60.png)\n\nTrusted by\n\nOver 1M\n\neducators\n\n- ![](https://framerusercontent.com/images/IEmWpnLcu1dZGGvxS8HKsyXACs.png)\n\n\n\n\n\n\n\n\n\n\n\n## \"SchoolAI helps me connect with them in ways I couldn’t before. Their grammar scores are improving, and their confidence is soaring.”\n\n\n\n\n\n\n\n\n\n## — Priscila Prestes, Oak Canyon Junior High\n\n\n\n\n\n\n\n## Teacher\n\n- ![](https://framerusercontent.com/images/I23Au24rGVlg3l4y57MTW7bfe2E.png)\n\n\n\n\n\n\n\n\n\n\n\n## “Partnering with SchoolAI has allowed us to introduce a tool in the classroom that provides teachers with valuable insights into their students’ progress in every class”\n\n\n\n\n\n\n\n\n\n## — Dr. Anthony Godfrey, Jordan School District\n\n\n\n\n\n\n\n## Superintendent\n\n- ![](https://framerusercontent.com/images/H2zJpZYl8TNlEIo4xd0nbS4mRYE.png)\n\n\n\n\n\n\n\n\n\n\n\n## “Small group instruction used to mean 20 kids doing busy work. Now they're getting personalized lessons while I target specific needs.”\n\n\n\n\n\n\n\n\n\n## — Mandy Shapiro, Prosper ISD\n\n\n\n\n\n\n\n## Teacher\n\n- ![](https://framerusercontent.com/images/gYDe92KrUk8sWyEJ7L85oDD3To4.png)\n\n\n\n\n\n\n\n\n\n\n\n## “The magic is the timing. Students get help the moment they need it, so they actually learn instead of just making corrections.”\n\n\n\n\n\n\n\n\n\n## — Chrissy Roe, Hoover City Schools\n\n\n\n\n\n\n\n## Teacher\n\n- ![](https://framerusercontent.com/images/rzFifpQQx48Yz09Eq0uQN0ovWTs.png)\n\n\n\n\n\n\n\n\n\n\n\n## “The tools that SchoolAI provides can save me a lot of time, so I can focus more on student interventions, providing specific feedback for students, analyzing student data and adjusting instruction”\n\n\n\n\n\n\n\n\n\n## — Sara Elder, Hidden Valley Middle School\n\n\n\n\n\n\n\n## Teacher\n\n- ![](https://framerusercontent.com/images/fnRb3ojWxwi9qR7no2Vo6IZi8.png)\n\n\n\n\n\n\n\n\n\n\n\n## “I got my teacher back from burnout after she discovered how Spaces allowed her to deeply engage her students. She has the spark back in her teaching.”\n\n\n\n\n\n\n\n\n\n## — Leroy Dixon, White Plains Middle School, New York\n\n\n\n\n\n\n\n## Principal\n\n- ![](https://framerusercontent.com/images/IEmWpnLcu1dZGGvxS8HKsyXACs.png)\n\n\n\n\n\n\n\n\n\n\n\n## \"SchoolAI helps me connect with them in ways I couldn’t before. Their grammar scores are improving, and their confidence is soaring.”\n\n\n\n\n\n\n\n\n\n## — Priscila Prestes, Oak Canyon Junior High\n\n\n\n\n\n\n\n## Teacher\n\n- ![](https://framerusercontent.com/images/I23Au24rGVlg3l4y57MTW7bfe2E.png)\n\n\n\n\n\n\n\n\n\n\n\n## “Partnering with SchoolAI has allowed us to introduce a tool in the classroom that provides teachers with valuable insights into their students’ progress in every class”\n\n\n\n\n\n\n\n\n\n## — Dr. Anthony Godfrey, Jordan School District\n\n\n\n\n\n\n\n## Superintendent\n\n- ![](https://framerusercontent.com/images/H2zJpZYl8TNlEIo4xd0nbS4mRYE.png)\n\n\n\n\n\n\n\n\n\n\n\n## “Small group instruction used to mean 20 kids doing busy work. Now they're getting personalized lessons while I target specific needs.”\n\n\n\n\n\n\n\n\n\n## — Mandy Shapiro, Prosper ISD\n\n\n\n\n\n\n\n## Teacher\n\n- ![](https://framerusercontent.com/images/gYDe92KrUk8sWyEJ7L85oDD3To4.png)\n\n\n\n\n\n\n\n\n\n\n\n## “The magic is the timing. Students get help the moment they need it, so they actually learn instead of just making corrections.”\n\n\n\n\n\n\n\n\n\n## — Chrissy Roe, Hoover City Schools\n\n\n\n\n\n\n\n## Teacher\n\n- ![](https://framerusercontent.com/images/rzFifpQQx48Yz09Eq0uQN0ovWTs.png)\n\n\n\n\n\n\n\n\n\n\n\n## “The tools that SchoolAI provides can save me a lot of time, so I can focus more on student interventions, providing specific feedback for students, analyzing student data and adjusting instruction”\n\n\n\n\n\n\n\n\n\n## — Sara Elder, Hidden Valley Middle School\n\n\n\n\n\n\n\n## Teacher\n\n- ![](https://framerusercontent.com/images/fnRb3ojWxwi9qR7no2Vo6IZi8.png)\n\n\n\n\n\n\n\n\n\n\n\n## “I got my teacher back from burnout after she discovered how Spaces allowed her to deeply engage her students. She has the spark back in her teaching.”\n\n\n\n\n\n\n\n\n\n## — Leroy Dixon, White Plains Middle School, New York\n\n\n\n\n\n\n\n## Principal\n\n- ![](https://framerusercontent.com/images/IEmWpnLcu1dZGGvxS8HKsyXACs.png)\n\n\n\n\n\n\n\n\n\n\n\n## \"SchoolAI helps me connect with them in ways I couldn’t before. Their grammar scores are improving, and their confidence is soaring.”\n\n\n\n\n\n\n\n\n\n## — Priscila Prestes, Oak Canyon Junior High\n\n\n\n\n\n\n\n## Teacher\n\n- ![](https://framerusercontent.com/images/I23Au24rGVlg3l4y57MTW7bfe2E.png)\n\n\n\n\n\n\n\n\n\n\n\n## “Partnering with SchoolAI has allowed us to introduce a tool in the classroom that provides teachers with valuable insights into their students’ progress in every class”\n\n\n\n\n\n\n\n\n\n## — Dr. Anthony Godfrey, Jordan School District\n\n\n\n\n\n\n\n## Superintendent\n\n- ![](https://framerusercontent.com/images/H2zJpZYl8TNlEIo4xd0nbS4mRYE.png)\n\n\n\n\n\n\n\n\n\n\n\n## “Small group instruction used to mean 20 kids doing busy work. Now they're getting personalized lessons while I target specific needs.”\n\n\n\n\n\n\n\n\n\n## — Mandy Shapiro, Prosper ISD\n\n\n\n\n\n\n\n## Teacher\n\n- ![](https://framerusercontent.com/images/gYDe92KrUk8sWyEJ7L85oDD3To4.png)\n\n\n\n\n\n\n\n\n\n\n\n## “The magic is the timing. Students get help the moment they need it, so they actually learn instead of just making corrections.”\n\n\n\n\n\n\n\n\n\n## — Chrissy Roe, Hoover City Schools\n\n\n\n\n\n\n\n## Teacher\n\n- ![](https://framerusercontent.com/images/rzFifpQQx48Yz09Eq0uQN0ovWTs.png)\n\n\n\n\n\n\n\n\n\n\n\n## “The tools that SchoolAI provides can save me a lot of time, so I can focus more on student interventions, providing specific feedback for students, analyzing student data and adjusting instruction”\n\n\n\n\n\n\n\n\n\n## — Sara Elder, Hidden Valley Middle School\n\n\n\n\n\n\n\n## Teacher\n\n- ![](https://framerusercontent.com/images/fnRb3ojWxwi9qR7no2Vo6IZi8.png)\n\n\n\n\n\n\n\n\n\n\n\n## “I got my teacher back from burnout after she discovered how Spaces allowed her to deeply engage her students. She has the spark back in her teaching.”\n\n\n\n\n\n\n\n\n\n## — Leroy Dixon, White Plains Middle School, New York\n\n\n\n\n\n\n\n## Principal\n\n- ![](https://framerusercontent.com/images/IEmWpnLcu1dZGGvxS8HKsyXACs.png)\n\n\n\n\n\n\n\n\n\n\n\n## \"SchoolAI helps me connect with them in ways I couldn’t before. Their grammar scores are improving, and their confidence is soaring.”\n\n\n\n\n\n\n\n\n\n## — Priscila Prestes, Oak Canyon Junior High\n\n\n\n\n\n\n\n## Teacher\n\n- ![](https://framerusercontent.com/images/I23Au24rGVlg3l4y57MTW7bfe2E.png)\n\n\n\n\n\n\n\n\n\n\n\n## “Partnering with SchoolAI has allowed us to introduce a tool in the classroom that provides teachers with valuable insights into their students’ progress in every class”\n\n\n\n\n\n\n\n\n\n## — Dr. Anthony Godfrey, Jordan School District\n\n\n\n\n\n\n\n## Superintendent\n\n- ![](https://framerusercontent.com/images/H2zJpZYl8TNlEIo4xd0nbS4mRYE.png)\n\n\n\n\n\n\n\n\n\n\n\n## “Small group instruction used to mean 20 kids doing busy work. Now they're getting personalized lessons while I target specific needs.”\n\n\n\n\n\n\n\n\n\n## — Mandy Shapiro, Prosper ISD\n\n\n\n\n\n\n\n## Teacher\n\n- ![](https://framerusercontent.com/images/gYDe92KrUk8sWyEJ7L85oDD3To4.png)\n\n\n\n\n\n\n\n\n\n\n\n## “The magic is the timing. Students get help the moment they need it, so they actually learn instead of just making corrections.”\n\n\n\n\n\n\n\n\n\n## — Chrissy Roe, Hoover City Schools\n\n\n\n\n\n\n\n## Teacher\n\n- ![](https://framerusercontent.com/images/rzFifpQQx48Yz09Eq0uQN0ovWTs.png)\n\n\n\n\n\n\n\n\n\n\n\n## “The tools that SchoolAI provides can save me a lot of time, so I can focus more on student interventions, providing specific feedback for students, analyzing student data and adjusting instruction”\n\n\n\n\n\n\n\n\n\n## — Sara Elder, Hidden Valley Middle School\n\n\n\n\n\n\n\n## Teacher\n\n- ![](https://framerusercontent.com/images/fnRb3ojWxwi9qR7no2Vo6IZi8.png)\n\n\n\n\n\n\n\n\n\n\n\n## “I got my teacher back from burnout after she discovered how Spaces allowed her to deeply engage her students. She has the spark back in her teaching.”\n\n\n\n\n\n\n\n\n\n## — Leroy Dixon, White Plains Middle School, New York\n\n\n\n\n\n\n\n## Principal\n\n\n![Back Arrow](https://framerusercontent.com/images/6tTbkXggWgQCAJ4DO2QEdXXmgM.svg)![Next Arrow](https://framerusercontent.com/images/11KSGbIZoRSg4pjdnUoif6MKHI.svg)\n\n## Secure by design\n\nBecause we built SchoolAI specifically for students, we maintain the highest security and data privacy standards.\n\n![](https://framerusercontent.com/images/lsPOzqOKgyBjO74wue664Sdqv6g.png)\n\n![](https://framerusercontent.com/images/Ofs4BSQTI1aio6KJrKV7CmNgAY.png)\n\n![](https://framerusercontent.com/images/II2NSZWZvxxAMDmpRwLuhuivH64.png)\n\n![](https://framerusercontent.com/images/PlKoJtnfFdQ8fZ2hmYtRhFw9Y.png)\n\nPrivacy First\n\nOur direct agreements with AI model providers ensure that student or educator data is never saved or used to train future models.\n\nCertified Secure\n\nAlways Protected\n\nLeading in AI Safety\n\n- ![](https://framerusercontent.com/images/AqT3ftJTMxHw86yFfsrWYyQGnQM.png)\n\n\n\n\n\n\n\n\n\n\n\n# “Full oversight of student interactions—real-time insight and action.”\n\n\n\n\n\n\n\n\n\n\n\n— Jennifer Gonzalez, Cult of Pedagogy, January 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n![](https://framerusercontent.com/images/E9IToKKbAaXy7WitgUWIxEJBrsk.png)\n\n\n\n\n\n\n\n\n\n\n\n# “One of the top AI tools transforming classrooms.”\n\n\n\n\n\n\n\n\n\n\n\n— Forbes, May 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n![](https://framerusercontent.com/images/AbnF233TkINwVxmlQfZmxHlTDJY.png?scale-down-to=512)\n\n\n\n\n\n\n\n\n\n\n\n# “Bridging the gap between students, teachers, and school leaders.”\n\n\n\n\n\n\n\n\n\n\n\n— Newsweek, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n![](https://framerusercontent.com/images/07JjZiLX5104cbTvIvZKmgvr3k.png?scale-down-to=512)\n\n\n\n\n\n\n\n\n\n\n\n# “A teacher-approved AI system made just for education.”\n\n\n\n\n\n\n\n\n\n\n\n— Luke Edwards, Tech & Learning, January 2025\n\n- ![](https://framerusercontent.com/images/AqT3ftJTMxHw86yFfsrWYyQGnQM.png)\n\n\n\n\n\n\n\n\n\n\n\n# “Full oversight of student interactions—real-time insight and action.”\n\n\n\n\n\n\n\n\n\n\n\n— Jennifer Gonzalez, Cult of Pedagogy, January 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n![](https://framerusercontent.com/images/E9IToKKbAaXy7WitgUWIxEJBrsk.png)\n\n\n\n\n\n\n\n\n\n\n\n# “One of the top AI tools transforming classrooms.”\n\n\n\n\n\n\n\n\n\n\n\n— Forbes, May 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n![](https://framerusercontent.com/images/AbnF233TkINwVxmlQfZmxHlTDJY.png?scale-down-to=512)\n\n\n\n\n\n\n\n\n\n\n\n# “Bridging the gap between students, teachers, and school leaders.”\n\n\n\n\n\n\n\n\n\n\n\n— Newsweek, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n![](https://framerusercontent.com/images/07JjZiLX5104cbTvIvZKmgvr3k.png?scale-down-to=512)\n\n\n\n\n\n\n\n\n\n\n\n# “A teacher-approved AI system made just for education.”\n\n\n\n\n\n\n\n\n\n\n\n— Luke Edwards, Tech & Learning, January 2025\n\n- ![](https://framerusercontent.com/images/AqT3ftJTMxHw86yFfsrWYyQGnQM.png)\n\n\n\n\n\n\n\n\n\n\n\n# “Full oversight of student interactions—real-time insight and action.”\n\n\n\n\n\n\n\n\n\n\n\n— Jennifer Gonzalez, Cult of Pedagogy, January 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n![](https://framerusercontent.com/images/E9IToKKbAaXy7WitgUWIxEJBrsk.png)\n\n\n\n\n\n\n\n\n\n\n\n# “One of the top AI tools transforming classrooms.”\n\n\n\n\n\n\n\n\n\n\n\n— Forbes, May 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n![](https://framerusercontent.com/images/AbnF233TkINwVxmlQfZmxHlTDJY.png?scale-down-to=512)\n\n\n\n\n\n\n\n\n\n\n\n# “Bridging the gap between students, teachers, and school leaders.”\n\n\n\n\n\n\n\n\n\n\n\n— Newsweek, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n![](https://framerusercontent.com/images/07JjZiLX5104cbTvIvZKmgvr3k.png?scale-down-to=512)\n\n\n\n\n\n\n\n\n\n\n\n# “A teacher-approved AI system made just for education.”\n\n\n\n\n\n\n\n\n\n\n\n— Luke Edwards, Tech & Learning, January 2025\n\n\n[Explore press](https://schoolai.com/press-media)\n\n![Images of a primary, secondary, and college student side-by-side.](https://framerusercontent.com/images/5DDRJhF6MQcyefLl07pCrKgkAUk.png)\n\nFrom kindergarten to college.\n\n![Dot with headphones and a keyboard.](https://framerusercontent.com/images/2qcLArWx9bfEBxlKswLFmbmzak.png)\n\n### Ready to get started?\n\nAlways free for teachers.\n\nFree for teachers\n\n[For Students](https://schoolai.com/students)\n\n[Enter a space code](https://student.schoolai.com/student-space/)\n\n[For Teachers](https://schoolai.com/teachers)\n\n[Improve outcomes](https://schoolai.com/solutions/improve-student-outcomes)\n\n[Differentiate materials](https://schoolai.com/solutions/differentiate-materials)\n\n[Increase engagement](https://schoolai.com/solutions/increase-engagement)\n\n[Save time](https://schoolai.com/solutions/save-time)\n\n[For Parents & Guardians](https://schoolai.com/parents)\n\n[For Higher Education](https://schoolai.com/higher-education)\n\n[For Coaches](https://schoolai.com/coaches)\n\n[Become an AI expert](https://schoolai.com/solutions/become-ai-expert)\n\n[Provide effective tools](https://schoolai.com/solutions/provide-effective-tools)\n\n[Get implementation support](https://schoolai.com/solutions/implementation-support)\n\n[For](https://schoolai.com/school-leaders) School Leaders\n\n[Improve outcomes](https://schoolai.com/solutions/improve-school-outcomes)\n\n[Increase teacher satisfaction](https://schoolai.com/solutions/increase-teacher-satisfaction)\n\nProducts\n\n[Spaces](https://schoolai.com/products/spaces)\n\n[Mission Control](https://schoolai.com/products/mission-control)\n\n[PowerUps](https://schoolai.com/products/powerups)\n\n[Chrome Extension](https://schoolai.com/products/chrome-extension)\n\n[Organize](https://schoolai.com/products/organize)\n\n[Discover](https://schoolai.com/products/discover)\n\nResources\n\n[Professional development](https://schoolai.com/professional-development)\n\n[AI Readiness](https://schoolai.com/ai-readiness)\n\n[Blog](https://schoolai.com/blog)\n\n[Webinars & Trainings](https://schoolai.com/webinars)\n\n[Community](https://community.schoolai.com/c/starthere/)\n\n[Help Center](https://help.schoolai.com/en/)\n\nCompany\n\n[Pricing](https://schoolai.com/pricing)\n\n[About us](https://schoolai.com/about)\n\n[Featured press](https://schoolai.com/press-media)\n\n[Customer stories](https://schoolai.com/stories)\n\n[Data security](https://schoolai.com/data-security)\n\n[Careers](https://schoolai.com/careers)\n\n[Contact](https://schoolai.com/contact)\n\nCopyright © 2025 SchoolAI. All rights reserved.\n\n[Privacy Policy](https://schoolai.com/privacy)\n\n[Terms of Use](https://schoolai.com/terms)","size_bytes":17865},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import dotenv from \"dotenv\";\nimport express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\n// Load environment variables\ndotenv.config();\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2143},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};","size_bytes":4220},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { pdfProcessor } from \"./services/pdf-processor\";\nimport { vectorStore } from \"./services/vector-store\";\nimport { geminiService } from \"./services/gemini-service\";\nimport { setupAuth, isAuthenticated, isTeacher } from \"./simpleAuth\";\nimport { \n  chatRequestSchema, \n  createClassroomRequestSchema, \n  joinClassroomRequestSchema,\n  uploadDocumentRequestSchema,\n  USER_ROLES\n} from \"@shared/schema\";\nimport multer from \"multer\";\n\nconst upload = multer({\n  storage: multer.memoryStorage(),\n  limits: {\n    fileSize: 10 * 1024 * 1024, // 10MB limit\n  },\n  fileFilter: (req, file, cb) => {\n    if (file.mimetype === 'application/pdf') {\n      cb(null, true);\n    } else {\n      cb(new Error('Only PDF files are allowed'));\n    }\n  },\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  await setupAuth(app);\n\n  // Auth routes are now handled in simpleAuth.ts\n\n  // isTeacher middleware is now imported from simpleAuth.ts\n  // Create classroom (Teachers only)\n  app.post(\"/api/classrooms\", isAuthenticated, isTeacher, async (req: any, res) => {\n    try {\n      const { name, description, gradeLevel, subject } = createClassroomRequestSchema.parse(req.body);\n      const teacherId = req.user.id;\n\n      const classroom = await storage.createClassroom({\n        name,\n        description,\n        gradeLevel,\n        subject,\n        teacherId,\n      });\n\n      res.json({\n        message: \"Classroom created successfully\",\n        classroom,\n      });\n    } catch (error) {\n      console.error(\"Create classroom error:\", error);\n      res.status(500).json({ message: error instanceof Error ? error.message : \"Failed to create classroom\" });\n    }\n  });\n\n  // Get user's classrooms\n  app.get(\"/api/classrooms\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const user = await storage.getUser(userId);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      let classrooms;\n      if (user.role === USER_ROLES.TEACHER) {\n        classrooms = await storage.getClassroomsByTeacher(userId);\n      } else {\n        classrooms = await storage.getClassroomsByStudent(userId);\n      }\n\n      res.json({ classrooms });\n    } catch (error) {\n      console.error(\"Get classrooms error:\", error);\n      res.status(500).json({ message: error instanceof Error ? error.message : \"Failed to get classrooms\" });\n    }\n  });\n\n  // Join classroom by invite code (Students only)\n  app.post(\"/api/classrooms/join\", isAuthenticated, async (req: any, res) => {\n    try {\n      const { inviteCode } = joinClassroomRequestSchema.parse(req.body);\n      const studentId = req.user.id;\n\n      const success = await storage.joinClassroomByCode(studentId, inviteCode);\n      \n      if (success) {\n        res.json({ message: \"Successfully joined classroom\" });\n      } else {\n        res.status(404).json({ message: \"Invalid invite code\" });\n      }\n    } catch (error) {\n      console.error(\"Join classroom error:\", error);\n      res.status(500).json({ message: error instanceof Error ? error.message : \"Failed to join classroom\" });\n    }\n  });\n\n  // Upload document to classroom (Teachers only)\n  app.post(\"/api/classrooms/:classroomId/documents\", isAuthenticated, isTeacher, upload.single('file'), async (req: any, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ message: \"No file uploaded\" });\n      }\n\n      const { classroomId } = req.params;\n      const teacherId = req.user.id;\n\n      // Verify teacher owns this classroom\n      const classroom = await storage.getClassroom(classroomId);\n      if (!classroom || classroom.teacherId !== teacherId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      // Create document record\n      const document = await storage.createDocument({\n        name: req.file.originalname,\n        filename: req.file.originalname,\n        size: req.file.size,\n        mimeType: req.file.mimetype,\n        classroomId,\n        uploadedBy: teacherId,\n      });\n\n      // Process PDF and create embeddings for classroom content\n      const text = await pdfProcessor.extractText(req.file.buffer);\n      const chunks = pdfProcessor.chunkText(text);\n      \n      // Add to vector store with classroom context\n      await vectorStore.addDocuments(document.id, chunks);\n\n      res.json({\n        message: \"Document uploaded successfully\",\n        document,\n      });\n    } catch (error) {\n      console.error(\"Upload document error:\", error);\n      res.status(500).json({ message: error instanceof Error ? error.message : \"Failed to upload document\" });\n    }\n  });\n\n  // Get classroom documents\n  app.get(\"/api/classrooms/:classroomId/documents\", isAuthenticated, async (req: any, res) => {\n    try {\n      const { classroomId } = req.params;\n      const documents = await storage.getDocumentsByClassroom(classroomId);\n      res.json({ documents });\n    } catch (error) {\n      console.error(\"Get documents error:\", error);\n      res.status(500).json({ message: error instanceof Error ? error.message : \"Failed to get documents\" });\n    }\n  });\n\n  // Chat with AI tutor\n  app.post(\"/api/chat\", isAuthenticated, async (req: any, res) => {\n    try {\n      const { sessionId, classroomId, message } = chatRequestSchema.parse(req.body);\n      const studentId = req.user.id;\n\n      // Get or create chat session\n      let session;\n      if (sessionId) {\n        session = await storage.getChatSession(sessionId);\n        if (!session || session.studentId !== studentId) {\n          return res.status(403).json({ message: \"Access denied\" });\n        }\n      } else {\n        session = await storage.createChatSession(studentId, classroomId);\n      }\n\n      // Get classroom documents for context\n      const documents = await storage.getDocumentsByClassroom(classroomId);\n      const allChunks = [];\n      \n      for (const doc of documents) {\n        const chunks = await vectorStore.similaritySearch(doc.id, message);\n        allChunks.push(...chunks);\n      }\n\n      const context = allChunks.map(chunk => chunk.content);\n\n      // Get user info for grade-adaptive responses\n      const user = await storage.getUser(studentId);\n      const gradeLevel = user?.gradeLevel || 8;\n\n      // Create grade-adaptive prompt\n      const gradePrompt = `You are JIGYASA.AI, an AI tutor for grade ${gradeLevel} students. Use the Socratic method - ask leading questions to guide learning rather than giving direct answers. Adapt your language complexity to grade ${gradeLevel} level. Reference the provided curriculum materials and always cite your sources.`;\n\n      // Generate response using Gemini with educational context\n      const response = await geminiService.chat(\n        `${gradePrompt}\\n\\nStudent question: ${message}`, \n        context, \n        []\n      );\n\n      // Store messages\n      await storage.createChatMessage({\n        sessionId: session.id,\n        content: message,\n        role: 'user',\n      });\n\n      await storage.createChatMessage({\n        sessionId: session.id,\n        content: response,\n        role: 'assistant',\n        citations: JSON.stringify(context.slice(0, 2)), // Store source references\n      });\n\n      res.json({\n        sessionId: session.id,\n        response,\n        sources: context.slice(0, 2),\n      });\n    } catch (error) {\n      console.error(\"Chat error:\", error);\n      res.status(500).json({ message: error instanceof Error ? error.message : \"Failed to process chat request\" });\n    }\n  });\n\n  // Get chat sessions for a classroom\n  app.get(\"/api/classrooms/:classroomId/sessions\", isAuthenticated, async (req: any, res) => {\n    try {\n      const { classroomId } = req.params;\n      const studentId = req.user.id;\n      \n      const sessions = await storage.getChatSessionsByStudent(studentId, classroomId);\n      res.json({ sessions });\n    } catch (error) {\n      console.error(\"Get sessions error:\", error);\n      res.status(500).json({ message: error instanceof Error ? error.message : \"Failed to get sessions\" });\n    }\n  });\n\n  // Get messages for a chat session\n  app.get(\"/api/sessions/:sessionId/messages\", isAuthenticated, async (req: any, res) => {\n    try {\n      const { sessionId } = req.params;\n      const studentId = req.user.id;\n      \n      // Verify session belongs to student\n      const session = await storage.getChatSession(sessionId);\n      if (!session || session.studentId !== studentId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      const messages = await storage.getChatMessages(sessionId);\n      res.json({ messages });\n    } catch (error) {\n      console.error(\"Get messages error:\", error);\n      res.status(500).json({ message: error instanceof Error ? error.message : \"Failed to get messages\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":9032},"server/storage.ts":{"content":"import { \n  type User,\n  type UpsertUser,\n  type Classroom,\n  type InsertClassroom,\n  type Document,\n  type InsertDocument,\n  type ChatSession,\n  type ChatMessage,\n  type InsertChatMessage,\n  users,\n  classrooms,\n  classroomEnrollments,\n  documents,\n  documentChunks,\n  chatSessions,\n  chatMessages,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, desc, sql } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations (required for Replit Auth)\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  \n  // Classroom operations\n  createClassroom(classroom: InsertClassroom): Promise<Classroom>;\n  getClassroom(id: string): Promise<Classroom | undefined>;\n  getClassroomsByTeacher(teacherId: string): Promise<Classroom[]>;\n  getClassroomsByStudent(studentId: string): Promise<Classroom[]>;\n  generateInviteCode(classroomId: string): Promise<string>;\n  joinClassroomByCode(studentId: string, inviteCode: string): Promise<boolean>;\n  \n  // Document operations\n  createDocument(document: InsertDocument): Promise<Document>;\n  getDocumentsByClassroom(classroomId: string): Promise<Document[]>;\n  deleteDocument(id: string): Promise<boolean>;\n  \n  // Chat operations\n  createChatSession(studentId: string, classroomId: string, title?: string): Promise<ChatSession>;\n  getChatSession(id: string): Promise<ChatSession | undefined>;\n  getChatSessionsByStudent(studentId: string, classroomId: string): Promise<ChatSession[]>;\n  createChatMessage(message: InsertChatMessage): Promise<ChatMessage>;\n  getChatMessages(sessionId: string): Promise<ChatMessage[]>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations (required for Replit Auth)\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  // Classroom operations\n  async createClassroom(classroomData: InsertClassroom): Promise<Classroom> {\n    const inviteCode = Math.random().toString(36).substring(2, 8).toUpperCase();\n    const [classroom] = await db\n      .insert(classrooms)\n      .values({ ...classroomData, inviteCode })\n      .returning();\n    return classroom;\n  }\n\n  async getClassroom(id: string): Promise<Classroom | undefined> {\n    const [classroom] = await db.select().from(classrooms).where(eq(classrooms.id, id));\n    return classroom;\n  }\n\n  async getClassroomsByTeacher(teacherId: string): Promise<Classroom[]> {\n    return await db\n      .select()\n      .from(classrooms)\n      .where(and(eq(classrooms.teacherId, teacherId), eq(classrooms.isActive, true)))\n      .orderBy(desc(classrooms.createdAt));\n  }\n\n  async getClassroomsByStudent(studentId: string): Promise<Classroom[]> {\n    return await db\n      .select({ \n        id: classrooms.id,\n        name: classrooms.name,\n        description: classrooms.description,\n        gradeLevel: classrooms.gradeLevel,\n        subject: classrooms.subject,\n        teacherId: classrooms.teacherId,\n        inviteCode: classrooms.inviteCode,\n        isActive: classrooms.isActive,\n        createdAt: classrooms.createdAt,\n        updatedAt: classrooms.updatedAt,\n      })\n      .from(classrooms)\n      .innerJoin(classroomEnrollments, eq(classrooms.id, classroomEnrollments.classroomId))\n      .where(\n        and(\n          eq(classroomEnrollments.studentId, studentId),\n          eq(classroomEnrollments.isActive, true),\n          eq(classrooms.isActive, true)\n        )\n      )\n      .orderBy(desc(classrooms.createdAt));\n  }\n\n  async generateInviteCode(classroomId: string): Promise<string> {\n    const newCode = Math.random().toString(36).substring(2, 8).toUpperCase();\n    await db\n      .update(classrooms)\n      .set({ inviteCode: newCode })\n      .where(eq(classrooms.id, classroomId));\n    return newCode;\n  }\n\n  async joinClassroomByCode(studentId: string, inviteCode: string): Promise<boolean> {\n    const [classroom] = await db\n      .select()\n      .from(classrooms)\n      .where(and(eq(classrooms.inviteCode, inviteCode), eq(classrooms.isActive, true)));\n    \n    if (!classroom) return false;\n\n    // Check if already enrolled\n    const [existing] = await db\n      .select()\n      .from(classroomEnrollments)\n      .where(\n        and(\n          eq(classroomEnrollments.studentId, studentId),\n          eq(classroomEnrollments.classroomId, classroom.id)\n        )\n      );\n\n    if (existing) {\n      // Reactivate if inactive\n      if (!existing.isActive) {\n        await db\n          .update(classroomEnrollments)\n          .set({ isActive: true })\n          .where(eq(classroomEnrollments.id, existing.id));\n      }\n      return true;\n    }\n\n    // Create new enrollment\n    await db\n      .insert(classroomEnrollments)\n      .values({\n        studentId,\n        classroomId: classroom.id,\n      });\n\n    return true;\n  }\n\n  // Document operations\n  async createDocument(documentData: InsertDocument): Promise<Document> {\n    const [document] = await db\n      .insert(documents)\n      .values(documentData)\n      .returning();\n    return document;\n  }\n\n  async getDocumentsByClassroom(classroomId: string): Promise<Document[]> {\n    return await db\n      .select()\n      .from(documents)\n      .where(and(eq(documents.classroomId, classroomId), eq(documents.isActive, true)))\n      .orderBy(desc(documents.createdAt));\n  }\n\n  async deleteDocument(id: string): Promise<boolean> {\n    const result = await db\n      .update(documents)\n      .set({ isActive: false })\n      .where(eq(documents.id, id));\n    return result.rowCount ? result.rowCount > 0 : false;\n  }\n\n  // Chat operations\n  async createChatSession(studentId: string, classroomId: string, title?: string): Promise<ChatSession> {\n    const [session] = await db\n      .insert(chatSessions)\n      .values({ studentId, classroomId, title })\n      .returning();\n    return session;\n  }\n\n  async getChatSession(id: string): Promise<ChatSession | undefined> {\n    const [session] = await db.select().from(chatSessions).where(eq(chatSessions.id, id));\n    return session;\n  }\n\n  async getChatSessionsByStudent(studentId: string, classroomId: string): Promise<ChatSession[]> {\n    return await db\n      .select()\n      .from(chatSessions)\n      .where(\n        and(\n          eq(chatSessions.studentId, studentId),\n          eq(chatSessions.classroomId, classroomId)\n        )\n      )\n      .orderBy(desc(chatSessions.updatedAt));\n  }\n\n  async createChatMessage(messageData: InsertChatMessage): Promise<ChatMessage> {\n    const [message] = await db\n      .insert(chatMessages)\n      .values(messageData)\n      .returning();\n    return message;\n  }\n\n  async getChatMessages(sessionId: string): Promise<ChatMessage[]> {\n    return await db\n      .select()\n      .from(chatMessages)\n      .where(eq(chatMessages.sessionId, sessionId))\n      .orderBy(chatMessages.createdAt);\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":7221},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from 'drizzle-orm';\nimport { \n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  integer,\n  boolean,\n  primaryKey,\n  uuid\n} from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table (required for authentication)\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table (required for authentication)\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  role: varchar(\"role\").notNull().default(\"student\"), // student, teacher, admin\n  gradeLevel: integer(\"grade_level\"), // For students (K-12)\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport type User = typeof users.$inferSelect;\nexport type UpsertUser = typeof users.$inferInsert;\n\n// Classroom schema\nexport const classrooms = pgTable(\"classrooms\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull(),\n  description: text(\"description\"),\n  gradeLevel: integer(\"grade_level\").notNull(),\n  subject: varchar(\"subject\"),\n  teacherId: varchar(\"teacher_id\").notNull().references(() => users.id, { onDelete: 'cascade' }),\n  inviteCode: varchar(\"invite_code\").unique(),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const classroomRelations = relations(classrooms, ({ one, many }) => ({\n  teacher: one(users, {\n    fields: [classrooms.teacherId],\n    references: [users.id],\n  }),\n  enrollments: many(classroomEnrollments),\n  documents: many(documents),\n}));\n\n// Student enrollment in classrooms\nexport const classroomEnrollments = pgTable(\"classroom_enrollments\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  studentId: varchar(\"student_id\").notNull().references(() => users.id, { onDelete: 'cascade' }),\n  classroomId: uuid(\"classroom_id\").notNull().references(() => classrooms.id, { onDelete: 'cascade' }),\n  enrolledAt: timestamp(\"enrolled_at\").defaultNow(),\n  isActive: boolean(\"is_active\").default(true),\n}, (table) => [\n  index(\"idx_student_classroom\").on(table.studentId, table.classroomId),\n]);\n\nexport const enrollmentRelations = relations(classroomEnrollments, ({ one }) => ({\n  student: one(users, {\n    fields: [classroomEnrollments.studentId],\n    references: [users.id],\n  }),\n  classroom: one(classrooms, {\n    fields: [classroomEnrollments.classroomId],\n    references: [classrooms.id],\n  }),\n}));\n\n// Documents (curriculum materials)\nexport const documents = pgTable(\"documents\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull(),\n  filename: varchar(\"filename\").notNull(),\n  size: integer(\"size\").notNull(),\n  mimeType: varchar(\"mime_type\").notNull(),\n  classroomId: uuid(\"classroom_id\").notNull().references(() => classrooms.id, { onDelete: 'cascade' }),\n  uploadedBy: varchar(\"uploaded_by\").notNull().references(() => users.id),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const documentRelations = relations(documents, ({ one, many }) => ({\n  classroom: one(classrooms, {\n    fields: [documents.classroomId],\n    references: [classrooms.id],\n  }),\n  uploader: one(users, {\n    fields: [documents.uploadedBy],\n    references: [users.id],\n  }),\n  chunks: many(documentChunks),\n}));\n\n// Document chunks for RAG\nexport const documentChunks = pgTable(\"document_chunks\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  documentId: uuid(\"document_id\").notNull().references(() => documents.id, { onDelete: 'cascade' }),\n  content: text(\"content\").notNull(),\n  chunkIndex: integer(\"chunk_index\").notNull(),\n  embedding: jsonb(\"embedding\"), // Store as JSONB array\n  metadata: jsonb(\"metadata\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n}, (table) => [\n  index(\"idx_document_chunks\").on(table.documentId),\n]);\n\nexport const chunkRelations = relations(documentChunks, ({ one }) => ({\n  document: one(documents, {\n    fields: [documentChunks.documentId],\n    references: [documents.id],\n  }),\n}));\n\n// Chat sessions\nexport const chatSessions = pgTable(\"chat_sessions\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  studentId: varchar(\"student_id\").notNull().references(() => users.id, { onDelete: 'cascade' }),\n  classroomId: uuid(\"classroom_id\").notNull().references(() => classrooms.id, { onDelete: 'cascade' }),\n  title: varchar(\"title\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const chatSessionRelations = relations(chatSessions, ({ one, many }) => ({\n  student: one(users, {\n    fields: [chatSessions.studentId],\n    references: [users.id],\n  }),\n  classroom: one(classrooms, {\n    fields: [chatSessions.classroomId],\n    references: [classrooms.id],\n  }),\n  messages: many(chatMessages),\n}));\n\n// Chat messages\nexport const chatMessages = pgTable(\"chat_messages\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  sessionId: uuid(\"session_id\").notNull().references(() => chatSessions.id, { onDelete: 'cascade' }),\n  content: text(\"content\").notNull(),\n  role: varchar(\"role\").notNull(), // user, assistant\n  citations: jsonb(\"citations\"), // Source references\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const messageRelations = relations(chatMessages, ({ one }) => ({\n  session: one(chatSessions, {\n    fields: [chatMessages.sessionId],\n    references: [chatSessions.id],\n  }),\n}));\n\n// Create insert schemas\nexport const insertClassroomSchema = createInsertSchema(classrooms).omit({ id: true, createdAt: true, updatedAt: true });\nexport const insertDocumentSchema = createInsertSchema(documents).omit({ id: true, createdAt: true, updatedAt: true });\nexport const insertChatSessionSchema = createInsertSchema(chatSessions).omit({ id: true, createdAt: true, updatedAt: true });\nexport const insertChatMessageSchema = createInsertSchema(chatMessages).omit({ id: true, createdAt: true });\n\n// Type exports\nexport type Classroom = typeof classrooms.$inferSelect;\nexport type InsertClassroom = z.infer<typeof insertClassroomSchema>;\nexport type Document = typeof documents.$inferSelect;\nexport type InsertDocument = z.infer<typeof insertDocumentSchema>;\nexport type ChatSession = typeof chatSessions.$inferSelect;\nexport type ChatMessage = typeof chatMessages.$inferSelect;\nexport type InsertChatMessage = z.infer<typeof insertChatMessageSchema>;\n\n// API request/response schemas\nexport const createClassroomRequestSchema = z.object({\n  name: z.string().min(1),\n  description: z.string().optional(),\n  gradeLevel: z.number().min(1).max(12),\n  subject: z.string().optional(),\n});\n\nexport const joinClassroomRequestSchema = z.object({\n  inviteCode: z.string().min(6).max(10),\n});\n\nexport const uploadDocumentRequestSchema = z.object({\n  classroomId: z.string().uuid(),\n});\n\nexport const chatRequestSchema = z.object({\n  sessionId: z.string().uuid().optional(),\n  classroomId: z.string().uuid(),\n  message: z.string().min(1),\n});\n\nexport type CreateClassroomRequest = z.infer<typeof createClassroomRequestSchema>;\nexport type JoinClassroomRequest = z.infer<typeof joinClassroomRequestSchema>;\nexport type ChatRequest = z.infer<typeof chatRequestSchema>;\n\n// Grade level utilities\nexport const GRADE_LEVELS = {\n  K: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, 10: 10, 11: 11, 12: 12\n} as const;\n\nexport const USER_ROLES = {\n  STUDENT: 'student',\n  TEACHER: 'teacher',\n  ADMIN: 'admin'\n} as const;\n","size_bytes":8091},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport Landing from \"@/pages/landing\";\nimport StudentDashboard from \"@/pages/student-dashboard\";\nimport TeacherDashboard from \"@/pages/teacher-dashboard\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading, user } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 via-white to-purple-50\">\n        <div className=\"text-center\">\n          <div className=\"w-16 h-16 bg-gradient-to-br from-blue-600 to-purple-600 rounded-xl flex items-center justify-center mx-auto mb-4 animate-pulse\">\n            <svg className=\"w-8 h-8 text-white\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n              <path fillRule=\"evenodd\" d=\"M18 13V5a2 2 0 00-2-2H4a2 2 0 00-2 2v8a2 2 0 002 2h3l3 3 3-3h3a2 2 0 002-2zM5 7a1 1 0 011-1h8a1 1 0 110 2H6a1 1 0 01-1-1zm1 3a1 1 0 100 2h3a1 1 0 100-2H6z\" clipRule=\"evenodd\" />\n            </svg>\n          </div>\n          <h1 className=\"text-xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">\n            JIGYASA.AI\n          </h1>\n          <p className=\"text-sm text-gray-500 mt-2\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Switch>\n      {!isAuthenticated ? (\n        <Route path=\"/\" component={Landing} />\n      ) : (\n        <>\n          <Route path=\"/\" component={() => {\n            if (user?.role === 'teacher') {\n              return <TeacherDashboard />;\n            } else {\n              return <StudentDashboard />;\n            }\n          }} />\n          <Route path=\"/student\" component={StudentDashboard} />\n          <Route path=\"/teacher\" component={TeacherDashboard} />\n        </>\n      )}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2316},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(20, 14.3%, 4.1%);\n  --muted: hsl(60, 4.8%, 95.9%);\n  --muted-foreground: hsl(25, 5.3%, 44.7%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(20, 14.3%, 4.1%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(20, 14.3%, 4.1%);\n  --border: hsl(20, 5.9%, 90%);\n  --input: hsl(20, 5.9%, 90%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(60, 4.8%, 95.9%);\n  --secondary-foreground: hsl(24, 9.8%, 10%);\n  --accent: hsl(60, 4.8%, 95.9%);\n  --accent-foreground: hsl(24, 9.8%, 10%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(60, 9.1%, 97.8%);\n  --ring: hsl(20, 14.3%, 4.1%);\n  --radius: 0.5rem;\n  --chat-user: hsl(207, 90%, 54%);\n  --chat-ai: hsl(60, 4.8%, 95.9%);\n  --success: hsl(142, 76%, 36%);\n}\n\n.dark {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(240, 3.7%, 15.9%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(240, 3.7%, 15.9%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 4.9%, 83.9%);\n  --radius: 0.5rem;\n  --chat-user: hsl(207, 90%, 54%);\n  --chat-ai: hsl(240, 3.7%, 15.9%);\n  --success: hsl(142, 76%, 36%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n@layer utilities {\n  .animate-fade-in {\n    animation: fadeIn 0.3s ease-in-out;\n  }\n  \n  .animate-slide-up {\n    animation: slideUp 0.3s ease-out;\n  }\n}\n\n@keyframes fadeIn {\n  0% { opacity: 0; }\n  100% { opacity: 1; }\n}\n\n@keyframes slideUp {\n  0% { \n    transform: translateY(10px); \n    opacity: 0; \n  }\n  100% { \n    transform: translateY(0); \n    opacity: 1; \n  }\n}\n","size_bytes":2259},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/services/gemini-service.ts":{"content":"import { GoogleGenAI } from \"@google/genai\";\nimport { type QuizQuestion } from '@shared/schema';\n\n// DON'T DELETE THIS COMMENT\n// Follow these instructions when using this blueprint:\n// - Note that the newest Gemini model series is \"gemini-2.5-flash\" or gemini-2.5-pro\"\n//   - do not change this unless explicitly requested by the user\n\nconst genai = new GoogleGenAI({ apiKey: process.env.GEMINI_API_KEY || \"\" });\n\nexport class GeminiService {\n  async chat(query: string, context: string[], conversationHistory: Array<{ role: string; content: string }> = []): Promise<string> {\n    const contextString = context.join('\\n\\n');\n    \n    try {\n      // Construct the conversation prompt\n      let conversationContext = '';\n      if (conversationHistory.length > 0) {\n        conversationContext = conversationHistory\n          .map(msg => `${msg.role === 'user' ? 'Human' : 'Assistant'}: ${msg.content}`)\n          .join('\\n') + '\\n';\n      }\n\n      const prompt = `You are a helpful AI study assistant. Use the provided context from the uploaded document to answer questions accurately and helpfully. If the context doesn't contain relevant information, say so and provide general guidance.\n\nContext from the document:\n${contextString}\n\n${conversationContext}Human: ${query}\nAssistant:`;\n\n      const response = await genai.models.generateContent({\n        model: \"gemini-2.5-flash\",\n        contents: prompt,\n      });\n\n      return response.text || \"I'm sorry, I couldn't generate a response.\";\n    } catch (error) {\n      throw new Error(`Gemini API error: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  async generateQuiz(context: string[], topic?: string): Promise<QuizQuestion[]> {\n    const contextString = context.join('\\n\\n');\n    const topicPrompt = topic ? ` on the topic of \"${topic}\"` : '';\n    \n    try {\n      const prompt = `Create 5 multiple-choice questions${topicPrompt} based on the provided context. Each question should have 4 options with only one correct answer. Return the response in JSON format with this structure:\n\n{\n  \"questions\": [\n    {\n      \"question\": \"Question text\",\n      \"options\": [\"Option A\", \"Option B\", \"Option C\", \"Option D\"],\n      \"correctAnswer\": 0,\n      \"explanation\": \"Explanation of the correct answer\"\n    }\n  ]\n}\n\nContext: ${contextString}`;\n\n      const response = await genai.models.generateContent({\n        model: \"gemini-2.5-pro\",\n        config: {\n          responseMimeType: \"application/json\",\n          responseSchema: {\n            type: \"object\",\n            properties: {\n              questions: {\n                type: \"array\",\n                items: {\n                  type: \"object\",\n                  properties: {\n                    question: { type: \"string\" },\n                    options: { \n                      type: \"array\",\n                      items: { type: \"string\" }\n                    },\n                    correctAnswer: { type: \"number\" },\n                    explanation: { type: \"string\" }\n                  },\n                  required: [\"question\", \"options\", \"correctAnswer\", \"explanation\"]\n                }\n              }\n            },\n            required: [\"questions\"]\n          }\n        },\n        contents: prompt,\n      });\n\n      const result = JSON.parse(response.text || '{\"questions\": []}');\n      return result.questions || [];\n    } catch (error) {\n      throw new Error(`Failed to generate quiz: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  async generateHint(question: string, context: string[]): Promise<string> {\n    const contextString = context.join('\\n\\n');\n    \n    try {\n      const prompt = `Provide a helpful hint for the given question based on the context. The hint should guide the user towards the answer without giving it away completely. Be concise and encouraging.\n\nContext:\n${contextString}\n\nQuestion: ${question}\n\nPlease provide a hint that will help me think about this question.`;\n\n      const response = await genai.models.generateContent({\n        model: \"gemini-2.5-flash\",\n        contents: prompt,\n      });\n\n      return response.text || \"I'm sorry, I couldn't generate a hint.\";\n    } catch (error) {\n      throw new Error(`Failed to generate hint: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  async generateAnswer(question: string, context: string[]): Promise<string> {\n    const contextString = context.join('\\n\\n');\n    \n    try {\n      const prompt = `Provide a comprehensive and detailed answer to the given question based on the context. Include explanations, examples, and any relevant details that would help someone understand the topic thoroughly.\n\nContext:\n${contextString}\n\nQuestion: ${question}\n\nPlease provide a complete and detailed answer.`;\n\n      const response = await genai.models.generateContent({\n        model: \"gemini-2.5-flash\",\n        contents: prompt,\n      });\n\n      return response.text || \"I'm sorry, I couldn't generate an answer.\";\n    } catch (error) {\n      throw new Error(`Failed to generate answer: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  async generateEmbedding(text: string): Promise<number[]> {\n    try {\n      const response = await genai.models.embedContent({\n        model: \"text-embedding-004\",\n        contents: [{\n          parts: [{ text }]\n        }],\n      });\n\n      return response.embeddings?.[0]?.values || [];\n    } catch (error) {\n      throw new Error(`Failed to generate embedding: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n}\n\nexport const geminiService = new GeminiService();","size_bytes":5634},"server/services/openai-service.ts":{"content":"import OpenAI from 'openai';\nimport { type QuizQuestion } from '@shared/schema';\n\n// the newest OpenAI model is \"gpt-4o\" which was released May 13, 2024. do not change this unless explicitly requested by the user\nconst openai = new OpenAI({\n  apiKey: process.env.OPENAI_API_KEY || process.env.OPENAI_API_KEY_ENV_VAR || \"your-api-key-here\",\n});\n\nexport class OpenAIService {\n  async chat(query: string, context: string[], conversationHistory: Array<{ role: string; content: string }> = []): Promise<string> {\n    const contextString = context.join('\\n\\n');\n    \n    const messages: OpenAI.Chat.Completions.ChatCompletionMessageParam[] = [\n      {\n        role: \"system\",\n        content: `You are a helpful AI study assistant. Use the provided context from the uploaded document to answer questions accurately and helpfully. If the context doesn't contain relevant information, say so and provide general guidance.\n\nContext from the document:\n${contextString}`\n      },\n      ...conversationHistory.map(msg => ({ role: msg.role as 'user' | 'assistant', content: msg.content })),\n      {\n        role: \"user\",\n        content: query\n      }\n    ];\n\n    try {\n      const response = await openai.chat.completions.create({\n        model: \"gpt-4o\",\n        messages,\n        max_tokens: 500,\n        temperature: 0.7,\n      });\n\n      return response.choices[0].message.content || \"I'm sorry, I couldn't generate a response.\";\n    } catch (error) {\n      throw new Error(`OpenAI API error: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  async generateQuiz(context: string[], topic?: string): Promise<QuizQuestion[]> {\n    const contextString = context.join('\\n\\n');\n    const topicPrompt = topic ? ` on the topic of \"${topic}\"` : '';\n    \n    try {\n      const response = await openai.chat.completions.create({\n        model: \"gpt-4o\",\n        messages: [\n          {\n            role: \"system\",\n            content: `Create 5 multiple-choice questions${topicPrompt} based on the provided context. Each question should have 4 options with only one correct answer. Return the response in JSON format with this structure:\n{\n  \"questions\": [\n    {\n      \"question\": \"Question text\",\n      \"options\": [\"Option A\", \"Option B\", \"Option C\", \"Option D\"],\n      \"correctAnswer\": 0,\n      \"explanation\": \"Explanation of the correct answer\"\n    }\n  ]\n}`\n          },\n          {\n            role: \"user\",\n            content: `Context: ${contextString}`\n          }\n        ],\n        response_format: { type: \"json_object\" },\n        temperature: 0.8,\n      });\n\n      const result = JSON.parse(response.choices[0].message.content || '{\"questions\": []}');\n      return result.questions || [];\n    } catch (error) {\n      throw new Error(`Failed to generate quiz: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  async generateHint(question: string, context: string[]): Promise<string> {\n    const contextString = context.join('\\n\\n');\n    \n    try {\n      const response = await openai.chat.completions.create({\n        model: \"gpt-4o\",\n        messages: [\n          {\n            role: \"system\",\n            content: `Provide a helpful hint for the given question based on the context. The hint should guide the user towards the answer without giving it away completely. Be concise and encouraging.\n\nContext:\n${contextString}`\n          },\n          {\n            role: \"user\",\n            content: `Question: ${question}\n\nPlease provide a hint that will help me think about this question.`\n          }\n        ],\n        max_tokens: 150,\n        temperature: 0.7,\n      });\n\n      return response.choices[0].message.content || \"I'm sorry, I couldn't generate a hint.\";\n    } catch (error) {\n      throw new Error(`Failed to generate hint: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  async generateAnswer(question: string, context: string[]): Promise<string> {\n    const contextString = context.join('\\n\\n');\n    \n    try {\n      const response = await openai.chat.completions.create({\n        model: \"gpt-4o\",\n        messages: [\n          {\n            role: \"system\",\n            content: `Provide a comprehensive and detailed answer to the given question based on the context. Include explanations, examples, and any relevant details that would help someone understand the topic thoroughly.\n\nContext:\n${contextString}`\n          },\n          {\n            role: \"user\",\n            content: `Question: ${question}\n\nPlease provide a complete and detailed answer.`\n          }\n        ],\n        max_tokens: 800,\n        temperature: 0.7,\n      });\n\n      return response.choices[0].message.content || \"I'm sorry, I couldn't generate an answer.\";\n    } catch (error) {\n      throw new Error(`Failed to generate answer: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n}\n\nexport const openaiService = new OpenAIService();\n","size_bytes":4921},"server/services/pdf-processor.ts":{"content":"import pdf from 'pdf-parse';\n\nexport interface DocumentChunk {\n  content: string;\n  metadata: {\n    page?: number;\n    chunkIndex: number;\n  };\n}\n\nexport class PDFProcessor {\n  async extractText(buffer: Buffer): Promise<string> {\n    try {\n      const data = await pdf(buffer);\n      return data.text;\n    } catch (error) {\n      throw new Error(`Failed to extract text from PDF: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  chunkText(text: string, chunkSize: number = 1000, overlap: number = 200): DocumentChunk[] {\n    const chunks: DocumentChunk[] = [];\n    let chunkIndex = 0;\n    \n    // Clean the text\n    const cleanText = text.replace(/\\s+/g, ' ').trim();\n    \n    for (let i = 0; i < cleanText.length; i += chunkSize - overlap) {\n      const chunk = cleanText.slice(i, i + chunkSize);\n      \n      if (chunk.trim().length > 0) {\n        chunks.push({\n          content: chunk.trim(),\n          metadata: {\n            chunkIndex: chunkIndex++,\n          },\n        });\n      }\n    }\n    \n    return chunks;\n  }\n}\n\nexport const pdfProcessor = new PDFProcessor();\n","size_bytes":1102},"server/services/vector-store.ts":{"content":"import { geminiService } from './gemini-service';\n\nexport interface VectorDocument {\n  id: string;\n  content: string;\n  embedding: number[];\n  metadata: any;\n}\n\nexport class VectorStore {\n  private documents: Map<string, VectorDocument[]> = new Map();\n\n  async addDocuments(documentId: string, chunks: Array<{ content: string; metadata: any }>): Promise<void> {\n    const vectorDocs: VectorDocument[] = [];\n    \n    for (let i = 0; i < chunks.length; i++) {\n      const chunk = chunks[i];\n      const embedding = await this.generateEmbedding(chunk.content);\n      \n      vectorDocs.push({\n        id: `${documentId}_${i}`,\n        content: chunk.content,\n        embedding,\n        metadata: chunk.metadata,\n      });\n    }\n    \n    this.documents.set(documentId, vectorDocs);\n  }\n\n  async generateEmbedding(text: string): Promise<number[]> {\n    return await geminiService.generateEmbedding(text);\n  }\n\n  async similaritySearch(documentId: string, query: string, topK: number = 3): Promise<VectorDocument[]> {\n    const docs = this.documents.get(documentId);\n    if (!docs) {\n      return [];\n    }\n\n    const queryEmbedding = await this.generateEmbedding(query);\n    \n    // Calculate cosine similarity for each document\n    const similarities = docs.map(doc => ({\n      doc,\n      similarity: this.cosineSimilarity(queryEmbedding, doc.embedding),\n    }));\n    \n    // Sort by similarity and return top K\n    return similarities\n      .sort((a, b) => b.similarity - a.similarity)\n      .slice(0, topK)\n      .map(item => item.doc);\n  }\n\n  private cosineSimilarity(a: number[], b: number[]): number {\n    let dotProduct = 0;\n    let normA = 0;\n    let normB = 0;\n    \n    for (let i = 0; i < a.length; i++) {\n      dotProduct += a[i] * b[i];\n      normA += a[i] * a[i];\n      normB += b[i] * b[i];\n    }\n    \n    return dotProduct / (Math.sqrt(normA) * Math.sqrt(normB));\n  }\n\n  removeDocument(documentId: string): void {\n    this.documents.delete(documentId);\n  }\n}\n\nexport const vectorStore = new VectorStore();\n","size_bytes":2015},"client/src/components/chat-interface.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { ChatMessage } from \"@/components/chat-message\";\nimport { QuizMessage } from \"@/components/quiz-message\";\nimport { Send, X, BookOpen, Lightbulb, HelpCircle, List, FileText } from \"lucide-react\";\n\ninterface ChatInterfaceProps {\n  documentId: string;\n  documentInfo: {\n    id: string;\n    name: string;\n    size: number;\n    uploadedAt: string;\n  } | null;\n  onClearDocument: () => void;\n}\n\ninterface Message {\n  id: string;\n  content: string;\n  role: 'user' | 'assistant';\n  timestamp: Date;\n  type?: 'chat' | 'quiz' | 'hint' | 'answer';\n  quizData?: any;\n}\n\nexport function ChatInterface({ documentId, documentInfo, onClearDocument }: ChatInterfaceProps) {\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [isTyping, setIsTyping] = useState(false);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Load chat history\n  const { data: chatHistory } = useQuery({\n    queryKey: ['/api/chat', documentId],\n    enabled: !!documentId,\n  });\n\n  useEffect(() => {\n    if (chatHistory && typeof chatHistory === 'object' && chatHistory !== null && 'messages' in chatHistory && Array.isArray(chatHistory.messages)) {\n      setMessages(chatHistory.messages.map((msg: any) => ({\n        ...msg,\n        timestamp: new Date(msg.timestamp),\n        type: 'chat',\n      })));\n    } else {\n      // Add welcome message\n      setMessages([{\n        id: 'welcome',\n        content: \"Hi! I've processed your document and I'm ready to help you learn. You can ask me questions about the content, start a quiz, or request hints on specific topics. What would you like to explore?\",\n        role: 'assistant',\n        timestamp: new Date(),\n        type: 'chat',\n      }]);\n    }\n  }, [chatHistory]);\n\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [messages, isTyping]);\n\n  const chatMutation = useMutation({\n    mutationFn: async (data: { query: string; conversationHistory?: Array<{ role: string; content: string }> }) => {\n      const response = await apiRequest('/api/chat', 'POST', {\n        query: data.query,\n        documentId,\n        conversationHistory: data.conversationHistory,\n      });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setMessages(prev => [...prev, {\n        id: Date.now().toString(),\n        content: data.response,\n        role: 'assistant',\n        timestamp: new Date(),\n        type: 'chat',\n      }]);\n      setIsTyping(false);\n      queryClient.invalidateQueries({ queryKey: ['/api/chat', documentId] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to send message\",\n        variant: \"destructive\",\n      });\n      setIsTyping(false);\n    },\n  });\n\n  const quizMutation = useMutation({\n    mutationFn: async (topic?: string) => {\n      const response = await apiRequest('/api/quiz', 'POST', {\n        documentId,\n        topic,\n      });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setMessages(prev => [...prev, {\n        id: Date.now().toString(),\n        content: \"Here's a quiz based on your document:\",\n        role: 'assistant',\n        timestamp: new Date(),\n        type: 'quiz',\n        quizData: data.quiz,\n      }]);\n      setIsTyping(false);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to generate quiz\",\n        variant: \"destructive\",\n      });\n      setIsTyping(false);\n    },\n  });\n\n  const hintMutation = useMutation({\n    mutationFn: async (question: string) => {\n      const response = await apiRequest('/api/hint', 'POST', {\n        question,\n        documentId,\n      });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setMessages(prev => [...prev, {\n        id: Date.now().toString(),\n        content: `💡 **Hint**: ${data.hint}`,\n        role: 'assistant',\n        timestamp: new Date(),\n        type: 'hint',\n      }]);\n      setIsTyping(false);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to generate hint\",\n        variant: \"destructive\",\n      });\n      setIsTyping(false);\n    },\n  });\n\n  const answerMutation = useMutation({\n    mutationFn: async (question: string) => {\n      const response = await apiRequest('/api/answer', 'POST', {\n        question,\n        documentId,\n      });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setMessages(prev => [...prev, {\n        id: Date.now().toString(),\n        content: `📖 **Complete Answer**: ${data.answer}`,\n        role: 'assistant',\n        timestamp: new Date(),\n        type: 'answer',\n      }]);\n      setIsTyping(false);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to generate answer\",\n        variant: \"destructive\",\n      });\n      setIsTyping(false);\n    },\n  });\n\n  const sendMessage = () => {\n    if (!inputValue.trim() || isTyping) return;\n\n    const userMessage: Message = {\n      id: Date.now().toString(),\n      content: inputValue,\n      role: 'user',\n      timestamp: new Date(),\n      type: 'chat',\n    };\n\n    setMessages(prev => [...prev, userMessage]);\n    setIsTyping(true);\n\n    const conversationHistory = messages\n      .filter(msg => msg.type === 'chat')\n      .map(msg => ({ role: msg.role, content: msg.content }));\n\n    chatMutation.mutate({\n      query: inputValue,\n      conversationHistory,\n    });\n\n    setInputValue(\"\");\n  };\n\n  const startQuiz = () => {\n    if (isTyping) return;\n    setIsTyping(true);\n    quizMutation.mutate(undefined);\n  };\n\n  const getHint = () => {\n    const lastUserMessage = messages.filter(msg => msg.role === 'user').slice(-1)[0];\n    if (!lastUserMessage) {\n      toast({\n        title: \"No Question Found\",\n        description: \"Please ask a question first to get a hint.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    if (isTyping) return;\n    setIsTyping(true);\n    hintMutation.mutate(lastUserMessage.content);\n  };\n\n  const showAnswer = () => {\n    const lastUserMessage = messages.filter(msg => msg.role === 'user').slice(-1)[0];\n    if (!lastUserMessage) {\n      toast({\n        title: \"No Question Found\",\n        description: \"Please ask a question first to see the answer.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    if (isTyping) return;\n    setIsTyping(true);\n    answerMutation.mutate(lastUserMessage.content);\n  };\n\n  const formatFileSize = (bytes: number) => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  return (\n    <div className=\"flex-1 flex flex-col\">\n      {/* File Info Bar */}\n      {documentInfo && (\n        <div className=\"bg-white border-b border-gray-200 px-4 py-3 sm:px-6\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-8 h-8 bg-red-100 rounded-lg flex items-center justify-center\">\n              <FileText className=\"text-red-600 w-4 h-4\" />\n            </div>\n            <div className=\"flex-1 min-w-0\">\n              <p className=\"text-sm font-medium text-gray-900 truncate\" data-testid=\"document-name\">\n                {documentInfo.name}\n              </p>\n              <p className=\"text-xs text-gray-500\" data-testid=\"document-info\">\n                {formatFileSize(documentInfo.size)} • Uploaded {new Date(documentInfo.uploadedAt).toLocaleTimeString()}\n              </p>\n            </div>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={onClearDocument}\n              data-testid=\"button-clear-document\"\n              title=\"Upload new document\"\n            >\n              <X className=\"w-4 h-4\" />\n            </Button>\n          </div>\n        </div>\n      )}\n\n      {/* Chat Messages Area */}\n      <div className=\"flex-1 overflow-y-auto p-4 sm:p-6 space-y-4\" data-testid=\"chat-messages\">\n        {messages.map((message) => (\n          message.type === 'quiz' ? (\n            <QuizMessage\n              key={message.id}\n              quiz={message.quizData}\n              documentId={documentId}\n            />\n          ) : (\n            <ChatMessage\n              key={message.id}\n              message={message}\n              onGetHint={getHint}\n              onShowAnswer={showAnswer}\n              showActions={message.role === 'assistant' && message.type === 'chat' && messages.filter(m => m.role === 'user').length > 0}\n            />\n          )\n        ))}\n\n        {/* Typing Indicator */}\n        {isTyping && (\n          <div className=\"flex items-start space-x-3\">\n            <div className=\"w-8 h-8 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center flex-shrink-0\">\n              <svg className=\"w-4 h-4 text-white\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                <path fillRule=\"evenodd\" d=\"M18 13V5a2 2 0 00-2-2H4a2 2 0 00-2 2v8a2 2 0 002 2h3l3 3 3-3h3a2 2 0 002-2zM5 7a1 1 0 011-1h8a1 1 0 110 2H6a1 1 0 01-1-1zm1 3a1 1 0 100 2h3a1 1 0 100-2H6z\" clipRule=\"evenodd\" />\n              </svg>\n            </div>\n            <div className=\"bg-gray-100 rounded-2xl rounded-tl-sm px-4 py-3\">\n              <div className=\"flex space-x-1\">\n                <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-pulse\" />\n                <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-pulse\" style={{ animationDelay: '0.1s' }} />\n                <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-pulse\" style={{ animationDelay: '0.2s' }} />\n              </div>\n            </div>\n          </div>\n        )}\n        <div ref={messagesEndRef} />\n      </div>\n\n      {/* Chat Input Area */}\n      <div className=\"border-t border-gray-200 bg-white p-4 sm:p-6\">\n        <div className=\"flex flex-col space-y-3\">\n          {/* Action Buttons Row */}\n          <div className=\"flex flex-wrap gap-2\">\n            <Button\n              variant=\"secondary\"\n              size=\"sm\"\n              onClick={startQuiz}\n              disabled={isTyping}\n              className=\"bg-purple-100 text-purple-700 hover:bg-purple-200\"\n              data-testid=\"button-start-quiz\"\n            >\n              <HelpCircle className=\"w-4 h-4 mr-2\" />\n              Start Quiz\n            </Button>\n            <Button\n              variant=\"secondary\"\n              size=\"sm\"\n              onClick={getHint}\n              disabled={isTyping}\n              className=\"bg-yellow-100 text-yellow-700 hover:bg-yellow-200\"\n              data-testid=\"button-get-hint\"\n            >\n              <Lightbulb className=\"w-4 h-4 mr-2\" />\n              Get Hint\n            </Button>\n            <Button\n              variant=\"secondary\"\n              size=\"sm\"\n              onClick={() => {\n                setInputValue(\"Explain the main concept from this chapter\");\n              }}\n              disabled={isTyping}\n              className=\"bg-green-100 text-green-700 hover:bg-green-200\"\n              data-testid=\"button-explain-topic\"\n            >\n              <BookOpen className=\"w-4 h-4 mr-2\" />\n              Explain Topic\n            </Button>\n            <Button\n              variant=\"secondary\"\n              size=\"sm\"\n              onClick={() => {\n                setInputValue(\"Summarize the key points from this document\");\n              }}\n              disabled={isTyping}\n              className=\"bg-gray-100 text-gray-700 hover:bg-gray-200\"\n              data-testid=\"button-summarize\"\n            >\n              <List className=\"w-4 h-4 mr-2\" />\n              Summarize\n            </Button>\n          </div>\n\n          {/* Text Input Row */}\n          <div className=\"flex space-x-3\">\n            <div className=\"flex-1 relative\">\n              <Input\n                type=\"text\"\n                placeholder=\"Ask a question about your document...\"\n                value={inputValue}\n                onChange={(e) => setInputValue(e.target.value)}\n                onKeyPress={(e) => e.key === 'Enter' && sendMessage()}\n                disabled={isTyping}\n                className=\"pr-12\"\n                data-testid=\"input-chat\"\n              />\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={sendMessage}\n                disabled={isTyping || !inputValue.trim()}\n                className=\"absolute right-1 top-1/2 transform -translate-y-1/2 h-8 w-8 p-0\"\n                data-testid=\"button-send-message\"\n              >\n                <Send className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          </div>\n\n          {/* Input Helper Text */}\n          <p className=\"text-xs text-gray-500\">\n            Try asking: \"Explain this concept\", \"Give me a quiz\", or \"What's the main idea of chapter 3?\"\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":13481},"client/src/components/chat-message.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Lightbulb, Check, User } from \"lucide-react\";\n\ninterface ChatMessageProps {\n  message: {\n    id: string;\n    content: string;\n    role: 'user' | 'assistant';\n    timestamp: Date;\n    type?: string;\n  };\n  onGetHint?: () => void;\n  onShowAnswer?: () => void;\n  showActions?: boolean;\n}\n\nexport function ChatMessage({ message, onGetHint, onShowAnswer, showActions }: ChatMessageProps) {\n  const isUser = message.role === 'user';\n\n  return (\n    <div className={`flex items-start space-x-3 animate-fade-in ${isUser ? 'justify-end' : ''}`}>\n      {!isUser && (\n        <div className=\"w-8 h-8 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center flex-shrink-0\">\n          <svg className=\"w-4 h-4 text-white\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n            <path fillRule=\"evenodd\" d=\"M18 13V5a2 2 0 00-2-2H4a2 2 0 00-2 2v8a2 2 0 002 2h3l3 3 3-3h3a2 2 0 002-2zM5 7a1 1 0 011-1h8a1 1 0 110 2H6a1 1 0 01-1-1zm1 3a1 1 0 100 2h3a1 1 0 100-2H6z\" clipRule=\"evenodd\" />\n          </svg>\n        </div>\n      )}\n      \n      <div className={`rounded-2xl px-4 py-3 max-w-lg ${\n        isUser \n          ? 'bg-blue-600 text-white rounded-tr-sm' \n          : 'bg-gray-100 rounded-tl-sm'\n      }`}>\n        <div className={`${isUser ? 'text-white' : 'text-gray-800'} whitespace-pre-wrap`}>\n          {message.content}\n        </div>\n        \n        {showActions && !isUser && (\n          <div className=\"mt-3 flex flex-wrap gap-2\">\n            <Button\n              variant=\"secondary\"\n              size=\"sm\"\n              onClick={onGetHint}\n              className=\"bg-blue-100 text-blue-700 hover:bg-blue-200 text-xs\"\n              data-testid=\"button-message-hint\"\n            >\n              <Lightbulb className=\"w-3 h-3 mr-1\" />\n              Get Hint\n            </Button>\n            <Button\n              variant=\"secondary\"\n              size=\"sm\"\n              onClick={onShowAnswer}\n              className=\"bg-green-100 text-green-700 hover:bg-green-200 text-xs\"\n              data-testid=\"button-message-answer\"\n            >\n              <Check className=\"w-3 h-3 mr-1\" />\n              Show Answer\n            </Button>\n          </div>\n        )}\n      </div>\n\n      {isUser && (\n        <div className=\"w-8 h-8 bg-gray-300 rounded-full flex items-center justify-center flex-shrink-0\">\n          <User className=\"text-gray-600 w-4 h-4\" />\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":2487},"client/src/components/file-upload.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Upload, FileText, Loader2 } from \"lucide-react\";\n\ninterface FileUploadProps {\n  onDocumentUploaded: (documentId: string, documentInfo: any) => void;\n}\n\nexport function FileUpload({ onDocumentUploaded }: FileUploadProps) {\n  const [isUploading, setIsUploading] = useState(false);\n  const [uploadProgress, setUploadProgress] = useState(0);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const { toast } = useToast();\n\n  const handleFileSelect = async (file: File) => {\n    if (!file.type.includes('pdf')) {\n      toast({\n        title: \"Error\",\n        description: \"Please select a PDF file.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (file.size > 10 * 1024 * 1024) {\n      toast({\n        title: \"Error\", \n        description: \"File size must be less than 10MB.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsUploading(true);\n    setUploadProgress(10);\n\n    try {\n      const formData = new FormData();\n      formData.append('file', file);\n\n      setUploadProgress(50);\n\n      const response = await fetch('/api/upload', {\n        method: 'POST',\n        body: formData,\n        credentials: 'include',\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Upload failed');\n      }\n\n      setUploadProgress(90);\n\n      const result = await response.json();\n      \n      setUploadProgress(100);\n      \n      setTimeout(() => {\n        onDocumentUploaded(result.documentId, result.document);\n        setIsUploading(false);\n        setUploadProgress(0);\n      }, 500);\n\n    } catch (error) {\n      console.error('Upload error:', error);\n      toast({\n        title: \"Upload Failed\",\n        description: error instanceof Error ? error.message : \"Failed to upload document. Please try again.\",\n        variant: \"destructive\",\n      });\n      setIsUploading(false);\n      setUploadProgress(0);\n    }\n  };\n\n  const handleFileInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      handleFileSelect(file);\n    }\n  };\n\n  const handleDrop = (e: React.DragEvent) => {\n    e.preventDefault();\n    const file = e.dataTransfer.files[0];\n    if (file) {\n      handleFileSelect(file);\n    }\n  };\n\n  const handleDragOver = (e: React.DragEvent) => {\n    e.preventDefault();\n  };\n\n  return (\n    <div className=\"flex-1 flex items-center justify-center p-6\">\n      <div className=\"w-full max-w-lg\">\n        <div className=\"text-center mb-8\">\n          <div className=\"mx-auto w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mb-4\">\n            <Upload className=\"text-blue-600 w-8 h-8\" />\n          </div>\n          <h2 className=\"text-2xl font-semibold text-gray-900 mb-2\">\n            Upload your textbook to get started\n          </h2>\n          <p className=\"text-gray-600\">\n            Upload a PDF document and start learning with AI-powered assistance\n          </p>\n        </div>\n\n        {/* File Drop Zone */}\n        <div\n          className=\"border-2 border-dashed border-gray-300 rounded-xl p-8 text-center hover:border-blue-400 transition-colors duration-200 cursor-pointer bg-white\"\n          onDrop={handleDrop}\n          onDragOver={handleDragOver}\n          onClick={() => fileInputRef.current?.click()}\n          data-testid=\"file-drop-zone\"\n        >\n          <input\n            type=\"file\"\n            ref={fileInputRef}\n            className=\"hidden\"\n            accept=\".pdf\"\n            onChange={handleFileInputChange}\n            disabled={isUploading}\n            data-testid=\"file-input\"\n          />\n          \n          <div className=\"space-y-4\">\n            <div className=\"flex justify-center\">\n              {isUploading ? (\n                <Loader2 className=\"text-blue-600 w-12 h-12 animate-spin\" />\n              ) : (\n                <div className=\"text-gray-400\">\n                  <svg className=\"w-12 h-12\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                    <path fillRule=\"evenodd\" d=\"M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM6.293 6.707a1 1 0 010-1.414l3-3a1 1 0 011.414 0l3 3a1 1 0 01-1.414 1.414L11 5.414V13a1 1 0 11-2 0V5.414L7.707 6.707a1 1 0 01-1.414 0z\" clipRule=\"evenodd\" />\n                  </svg>\n                </div>\n              )}\n            </div>\n            <div>\n              <p className=\"text-lg font-medium text-gray-700\">\n                {isUploading ? \"Processing your document...\" : \"Drop your PDF here or click to browse\"}\n              </p>\n              <p className=\"text-sm text-gray-500 mt-1\">\n                Supports PDF files up to 10MB\n              </p>\n            </div>\n          </div>\n        </div>\n\n        {/* Upload Progress */}\n        {isUploading && (\n          <div className=\"mt-4\">\n            <div className=\"bg-white rounded-lg p-4 border border-gray-200\">\n              <div className=\"flex items-center space-x-3 mb-2\">\n                <Loader2 className=\"w-5 h-5 animate-spin text-blue-600\" />\n                <span className=\"text-sm text-gray-600\">\n                  Processing your document...\n                </span>\n              </div>\n              <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                <div \n                  className=\"bg-blue-600 h-2 rounded-full transition-all duration-300\"\n                  style={{ width: `${uploadProgress}%` }}\n                  data-testid=\"upload-progress\"\n                />\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":5760},"client/src/components/quiz-message.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { HelpCircle, CheckCircle, XCircle } from \"lucide-react\";\n\ninterface QuizMessageProps {\n  quiz: {\n    id: string;\n    topic: string;\n    questions: Array<{\n      question: string;\n      options: string[];\n      correctAnswer: number;\n      explanation: string;\n    }>;\n  };\n  documentId: string;\n}\n\nexport function QuizMessage({ quiz }: QuizMessageProps) {\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [selectedAnswer, setSelectedAnswer] = useState<string>(\"\");\n  const [showResult, setShowResult] = useState(false);\n  const [answers, setAnswers] = useState<number[]>([]);\n  const [score, setScore] = useState(0);\n\n  const question = quiz.questions[currentQuestion];\n  const isLastQuestion = currentQuestion === quiz.questions.length - 1;\n\n  const handleSubmitAnswer = () => {\n    if (!selectedAnswer) return;\n\n    const answerIndex = parseInt(selectedAnswer);\n    const isCorrect = answerIndex === question.correctAnswer;\n    \n    const newAnswers = [...answers];\n    newAnswers[currentQuestion] = answerIndex;\n    setAnswers(newAnswers);\n\n    if (isCorrect) {\n      setScore(score + 1);\n    }\n\n    setShowResult(true);\n  };\n\n  const handleNextQuestion = () => {\n    if (isLastQuestion) {\n      // Quiz completed - could add completion logic here\n      return;\n    }\n    \n    setCurrentQuestion(currentQuestion + 1);\n    setSelectedAnswer(\"\");\n    setShowResult(false);\n  };\n\n  const handleSkipQuestion = () => {\n    if (isLastQuestion) {\n      return;\n    }\n    \n    setCurrentQuestion(currentQuestion + 1);\n    setSelectedAnswer(\"\");\n    setShowResult(false);\n  };\n\n  return (\n    <div className=\"flex items-start space-x-3 animate-fade-in\">\n      <div className=\"w-8 h-8 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center flex-shrink-0\">\n        <svg className=\"w-4 h-4 text-white\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n          <path fillRule=\"evenodd\" d=\"M18 13V5a2 2 0 00-2-2H4a2 2 0 00-2 2v8a2 2 0 002 2h3l3 3 3-3h3a2 2 0 002-2zM5 7a1 1 0 011-1h8a1 1 0 110 2H6a1 1 0 01-1-1zm1 3a1 1 0 100 2h3a1 1 0 100-2H6z\" clipRule=\"evenodd\" />\n        </svg>\n      </div>\n      \n      <Card className=\"max-w-2xl border border-gray-200 rounded-2xl rounded-tl-sm\">\n        <CardHeader className=\"pb-3\">\n          <div className=\"flex items-center space-x-2\">\n            <HelpCircle className=\"text-purple-600 w-5 h-5\" />\n            <h4 className=\"font-semibold text-gray-900\">Quiz: {quiz.topic}</h4>\n            <span className=\"bg-purple-100 text-purple-700 px-2 py-1 rounded-full text-xs\">\n              Question {currentQuestion + 1} of {quiz.questions.length}\n            </span>\n          </div>\n        </CardHeader>\n        \n        <CardContent>\n          <p className=\"text-gray-800 mb-4\" data-testid=\"quiz-question\">\n            {question.question}\n          </p>\n          \n          {!showResult ? (\n            <div className=\"space-y-2\">\n              <RadioGroup value={selectedAnswer} onValueChange={setSelectedAnswer}>\n                {question.options.map((option, index) => (\n                  <div key={index} className=\"flex items-center space-x-3 p-3 rounded-lg border border-gray-200 hover:bg-gray-50 transition-colors\">\n                    <RadioGroupItem value={index.toString()} id={`option-${index}`} />\n                    <Label htmlFor={`option-${index}`} className=\"flex-1 cursor-pointer text-gray-800\">\n                      {option}\n                    </Label>\n                  </div>\n                ))}\n              </RadioGroup>\n              \n              <div className=\"mt-4 flex justify-between\">\n                <Button\n                  variant=\"ghost\"\n                  onClick={handleSkipQuestion}\n                  disabled={isLastQuestion}\n                  data-testid=\"button-skip-question\"\n                >\n                  Skip Question\n                </Button>\n                <Button\n                  onClick={handleSubmitAnswer}\n                  disabled={!selectedAnswer}\n                  data-testid=\"button-submit-answer\"\n                >\n                  Submit Answer\n                </Button>\n              </div>\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {/* Show result */}\n              <div className={`p-4 rounded-lg border ${\n                parseInt(selectedAnswer) === question.correctAnswer \n                  ? 'bg-green-50 border-green-200' \n                  : 'bg-red-50 border-red-200'\n              }`}>\n                <div className=\"flex items-center space-x-2 mb-2\">\n                  {parseInt(selectedAnswer) === question.correctAnswer ? (\n                    <>\n                      <CheckCircle className=\"text-green-600 w-5 h-5\" />\n                      <span className=\"font-semibold text-green-800\">Correct!</span>\n                    </>\n                  ) : (\n                    <>\n                      <XCircle className=\"text-red-600 w-5 h-5\" />\n                      <span className=\"font-semibold text-red-800\">Incorrect</span>\n                    </>\n                  )}\n                </div>\n                <p className=\"text-sm text-gray-700\" data-testid=\"quiz-explanation\">\n                  {question.explanation}\n                </p>\n                {parseInt(selectedAnswer) !== question.correctAnswer && (\n                  <p className=\"text-sm text-gray-600 mt-2\">\n                    <strong>Correct answer:</strong> {question.options[question.correctAnswer]}\n                  </p>\n                )}\n              </div>\n              \n              {/* Progress and next button */}\n              <div className=\"flex justify-between items-center\">\n                <div className=\"text-sm text-gray-600\">\n                  Score: {score}/{currentQuestion + 1}\n                </div>\n                {!isLastQuestion ? (\n                  <Button onClick={handleNextQuestion} data-testid=\"button-next-question\">\n                    Next Question\n                  </Button>\n                ) : (\n                  <div className=\"text-sm font-semibold text-gray-800\">\n                    Quiz Complete! Final Score: {score}/{quiz.questions.length}\n                  </div>\n                )}\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":6614},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}","size_bytes":256},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  url: string,\n  method: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/home.tsx":{"content":"import { useState } from \"react\";\nimport { FileUpload } from \"@/components/file-upload\";\nimport { ChatInterface } from \"@/components/chat-interface\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Home() {\n  const [documentId, setDocumentId] = useState<string | null>(null);\n  const [documentInfo, setDocumentInfo] = useState<{\n    id: string;\n    name: string;\n    size: number;\n    uploadedAt: string;\n  } | null>(null);\n  const { toast } = useToast();\n\n  const handleDocumentUploaded = (docId: string, docInfo: any) => {\n    setDocumentId(docId);\n    setDocumentInfo(docInfo);\n    toast({\n      title: \"Success\",\n      description: \"Document uploaded successfully!\",\n    });\n  };\n\n  const handleClearDocument = () => {\n    setDocumentId(null);\n    setDocumentInfo(null);\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col bg-gray-50\">\n      {/* Header */}\n      <header className=\"bg-white border-b border-gray-200 px-4 py-4 sm:px-6\">\n        <div className=\"max-w-4xl mx-auto flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-8 h-8 bg-gradient-to-br from-blue-500 to-purple-600 rounded-lg flex items-center justify-center\">\n              <svg className=\"w-4 h-4 text-white\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                <path fillRule=\"evenodd\" d=\"M18 13V5a2 2 0 00-2-2H4a2 2 0 00-2 2v8a2 2 0 002 2h3l3 3 3-3h3a2 2 0 002-2zM5 7a1 1 0 011-1h8a1 1 0 110 2H6a1 1 0 01-1-1zm1 3a1 1 0 100 2h3a1 1 0 100-2H6z\" clipRule=\"evenodd\" />\n              </svg>\n            </div>\n            <h1 className=\"text-xl font-semibold text-gray-900\">Smart Study Buddy</h1>\n          </div>\n          <div className=\"text-sm text-gray-500 hidden sm:block\">\n            AI-Powered Learning Assistant\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <main className=\"flex-1 flex flex-col max-w-4xl mx-auto w-full\">\n        {!documentId ? (\n          <FileUpload onDocumentUploaded={handleDocumentUploaded} />\n        ) : (\n          <ChatInterface \n            documentId={documentId} \n            documentInfo={documentInfo}\n            onClearDocument={handleClearDocument}\n          />\n        )}\n      </main>\n    </div>\n  );\n}\n","size_bytes":2266},"client/src/pages/landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { LoginModal } from \"@/components/LoginModal\";\nimport { useState } from \"react\";\nimport { \n  BookOpen, \n  Users, \n  Shield, \n  Brain, \n  MessageSquare, \n  Target,\n  CheckCircle,\n  Star,\n  ArrowRight,\n  Sparkles,\n  GraduationCap,\n  Lock\n} from \"lucide-react\";\n\nexport default function Landing() {\n  const [showLogin, setShowLogin] = useState(false);\n  \n  const scrollToSection = (sectionId: string) => {\n    document.getElementById(sectionId)?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50\">\n      {/* Header */}\n      <header className=\"sticky top-0 bg-white/80 backdrop-blur-md border-b border-gray-200 z-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center justify-between h-16\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-10 h-10 bg-gradient-to-br from-blue-600 to-purple-600 rounded-xl flex items-center justify-center\">\n                <Brain className=\"text-white w-6 h-6\" />\n              </div>\n              <div>\n                <h1 className=\"text-xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">\n                  JIGYASA.AI\n                </h1>\n                <p className=\"text-xs text-gray-600\">Artificial Intelligence that builds Real Intelligence</p>\n              </div>\n            </div>\n            <nav className=\"hidden md:flex items-center space-x-8\">\n              <button \n                onClick={() => scrollToSection('features')}\n                className=\"text-gray-600 hover:text-blue-600 transition-colors\"\n              >\n                Features\n              </button>\n              <button \n                onClick={() => scrollToSection('pricing')}\n                className=\"text-gray-600 hover:text-blue-600 transition-colors\"\n              >\n                Pricing\n              </button>\n              <button \n                onClick={() => scrollToSection('about')}\n                className=\"text-gray-600 hover:text-blue-600 transition-colors\"\n              >\n                About\n              </button>\n              <button \n                onClick={() => scrollToSection('contact')}\n                className=\"text-gray-600 hover:text-blue-600 transition-colors\"\n              >\n                Contact\n              </button>\n              <Button variant=\"outline\" onClick={() => setShowLogin(true)} data-testid=\"button-sign-in\">\n                Sign In\n              </Button>\n              <Button \n                onClick={() => setShowLogin(true)}\n                className=\"bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700\"\n                data-testid=\"button-get-started\"\n              >\n                Get Started\n              </Button>\n            </nav>\n          </div>\n        </div>\n      </header>\n\n      {/* Hero Section */}\n      <section className=\"relative py-20 lg:py-32 overflow-hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-br from-blue-600/5 to-purple-600/5\"></div>\n        <div className=\"relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center\">\n            <div className=\"inline-flex items-center px-4 py-2 bg-blue-50 rounded-full text-sm text-blue-700 font-medium mb-8\">\n              <Sparkles className=\"w-4 h-4 mr-2\" />\n              Powered by Grade-Adaptive AI Technology\n            </div>\n            <h1 className=\"text-4xl lg:text-6xl font-bold text-gray-900 mb-6\">\n              Empower every learner,\n              <br />\n              <span className=\"bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">\n                support every educator\n              </span>\n            </h1>\n            <p className=\"text-xl text-gray-600 mb-8 max-w-3xl mx-auto\">\n              A trusted AI platform that creates safe, personalized learning experiences through Socratic questioning and curriculum-aligned content controlled by teachers.\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center mb-12\">\n              <Button \n                size=\"lg\" \n                className=\"bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-lg px-8 py-4\"\n                onClick={() => setShowLogin(true)}\n                data-testid=\"button-get-started-free\"\n              >\n                Get Started Free\n                <ArrowRight className=\"ml-2 w-5 h-5\" />\n              </Button>\n              <Button \n                variant=\"outline\" \n                size=\"lg\"\n                className=\"text-lg px-8 py-4\"\n                onClick={() => scrollToSection('demo')}\n              >\n                <MessageSquare className=\"mr-2 w-5 h-5\" />\n                Try Live Demo\n              </Button>\n            </div>\n\n            {/* Hero Image/Animation */}\n            <div className=\"relative max-w-4xl mx-auto\">\n              <div className=\"bg-white rounded-2xl shadow-2xl p-6 border\">\n                <div className=\"flex items-center space-x-3 mb-4\">\n                  <div className=\"w-3 h-3 bg-red-400 rounded-full\"></div>\n                  <div className=\"w-3 h-3 bg-yellow-400 rounded-full\"></div>\n                  <div className=\"w-3 h-3 bg-green-400 rounded-full\"></div>\n                  <div className=\"flex-1 bg-gray-100 rounded-full px-4 py-2\">\n                    <span className=\"text-sm text-gray-500\">JIGYASA.AI - Grade 8 Biology</span>\n                  </div>\n                </div>\n                <div className=\"bg-gradient-to-br from-blue-50 to-purple-50 rounded-lg p-8 text-left\">\n                  <div className=\"flex items-start space-x-4 mb-6\">\n                    <div className=\"w-8 h-8 bg-gradient-to-br from-blue-600 to-purple-600 rounded-full flex items-center justify-center flex-shrink-0\">\n                      <Brain className=\"text-white w-4 h-4\" />\n                    </div>\n                    <div className=\"flex-1\">\n                      <p className=\"text-gray-800 mb-2\">\n                        \"Let's explore photosynthesis together! Instead of just telling you the answer, can you think about what plants need to make their own food?\"\n                      </p>\n                      <div className=\"text-xs text-gray-500 bg-white/50 rounded px-2 py-1 inline-block\">\n                        📚 Referenced: Chapter 3 - Plant Biology Textbook\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center space-x-2 text-gray-600\">\n                    <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-pulse\"></div>\n                    <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-pulse\" style={{ animationDelay: '0.2s' }}></div>\n                    <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-pulse\" style={{ animationDelay: '0.4s' }}></div>\n                    <span className=\"text-sm ml-2\">AI is thinking...</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Key Features Section */}\n      <section id=\"features\" className=\"py-20 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl lg:text-4xl font-bold text-gray-900 mb-4\">\n              AI-Powered Learning That Actually Works\n            </h2>\n            <p className=\"text-xl text-gray-600 max-w-3xl mx-auto\">\n              Built specifically for education, with safety and pedagogical effectiveness at its core\n            </p>\n          </div>\n\n          <div className=\"grid lg:grid-cols-3 gap-8 mb-16\">\n            <Card className=\"border-2 border-blue-100 hover:border-blue-200 transition-colors\">\n              <CardContent className=\"p-8 text-center\">\n                <div className=\"w-16 h-16 bg-gradient-to-br from-blue-500 to-blue-600 rounded-2xl flex items-center justify-center mx-auto mb-6\">\n                  <Target className=\"text-white w-8 h-8\" />\n                </div>\n                <h3 className=\"text-2xl font-bold text-gray-900 mb-4\">Grade-Adaptive Learning</h3>\n                <p className=\"text-gray-600 mb-6\">\n                  AI automatically adjusts complexity and language to match each student's grade level, ensuring age-appropriate interactions.\n                </p>\n                <div className=\"bg-blue-50 rounded-lg p-4\">\n                  <p className=\"text-sm text-blue-700 font-medium\">Example for Grade 5:</p>\n                  <p className=\"text-sm text-gray-600 mt-1\">\"What do you think helps plants grow tall and strong?\"</p>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"border-2 border-purple-100 hover:border-purple-200 transition-colors\">\n              <CardContent className=\"p-8 text-center\">\n                <div className=\"w-16 h-16 bg-gradient-to-br from-purple-500 to-purple-600 rounded-2xl flex items-center justify-center mx-auto mb-6\">\n                  <MessageSquare className=\"text-white w-8 h-8\" />\n                </div>\n                <h3 className=\"text-2xl font-bold text-gray-900 mb-4\">Socratic Questioning</h3>\n                <p className=\"text-gray-600 mb-6\">\n                  Instead of giving direct answers, JIGYASA guides students with thoughtful questions that promote critical thinking.\n                </p>\n                <div className=\"bg-purple-50 rounded-lg p-4\">\n                  <p className=\"text-sm text-purple-700 font-medium\">Socratic Method:</p>\n                  <p className=\"text-sm text-gray-600 mt-1\">\"What do you already know about this topic?\"</p>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"border-2 border-green-100 hover:border-green-200 transition-colors\">\n              <CardContent className=\"p-8 text-center\">\n                <div className=\"w-16 h-16 bg-gradient-to-br from-green-500 to-green-600 rounded-2xl flex items-center justify-center mx-auto mb-6\">\n                  <Shield className=\"text-white w-8 h-8\" />\n                </div>\n                <h3 className=\"text-2xl font-bold text-gray-900 mb-4\">Walled Garden Safety</h3>\n                <p className=\"text-gray-600 mb-6\">\n                  AI only uses curriculum materials approved by teachers, ensuring safe, accurate, and curriculum-aligned responses.\n                </p>\n                <div className=\"bg-green-50 rounded-lg p-4\">\n                  <p className=\"text-sm text-green-700 font-medium\">Teacher Controlled:</p>\n                  <p className=\"text-sm text-gray-600 mt-1\">Only approved textbooks and materials</p>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* User Roles */}\n          <div className=\"grid lg:grid-cols-2 gap-12 mb-16\">\n            <div className=\"text-left\">\n              <div className=\"flex items-center mb-6\">\n                <GraduationCap className=\"text-blue-600 w-8 h-8 mr-3\" />\n                <h3 className=\"text-2xl font-bold text-gray-900\">For Students</h3>\n              </div>\n              <div className=\"space-y-4\">\n                {[\n                  \"Personalized AI tutoring adapted to your grade level\",\n                  \"Safe learning environment with curriculum-approved content\",\n                  \"Socratic questioning that develops critical thinking\",\n                  \"Real-time help with homework and study questions\",\n                  \"Chat history to review past conversations\",\n                  \"Source citations for all AI responses\"\n                ].map((feature, index) => (\n                  <div key={index} className=\"flex items-start\">\n                    <CheckCircle className=\"text-blue-600 w-5 h-5 mr-3 mt-0.5 flex-shrink-0\" />\n                    <span className=\"text-gray-700\">{feature}</span>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            <div className=\"text-left\">\n              <div className=\"flex items-center mb-6\">\n                <Users className=\"text-purple-600 w-8 h-8 mr-3\" />\n                <h3 className=\"text-2xl font-bold text-gray-900\">For Teachers</h3>\n              </div>\n              <div className=\"space-y-4\">\n                {[\n                  \"Create virtual classrooms and manage students\",\n                  \"Upload and control curriculum materials\",\n                  \"Monitor student interactions and progress\",\n                  \"Generate secure classroom invite codes\",\n                  \"Role-based access control and permissions\",\n                  \"Complete oversight of AI knowledge base\"\n                ].map((feature, index) => (\n                  <div key={index} className=\"flex items-start\">\n                    <CheckCircle className=\"text-purple-600 w-5 h-5 mr-3 mt-0.5 flex-shrink-0\" />\n                    <span className=\"text-gray-700\">{feature}</span>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Pricing Section */}\n      <section id=\"pricing\" className=\"py-20 bg-gray-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl lg:text-4xl font-bold text-gray-900 mb-4\">\n              Simple, Transparent Pricing\n            </h2>\n            <p className=\"text-xl text-gray-600\">\n              Start free and scale as your educational needs grow\n            </p>\n          </div>\n\n          <div className=\"grid lg:grid-cols-3 gap-8 max-w-5xl mx-auto\">\n            <Card className=\"border-2\">\n              <CardContent className=\"p-8\">\n                <h3 className=\"text-2xl font-bold mb-2\">Free</h3>\n                <div className=\"text-4xl font-bold mb-6\">$0<span className=\"text-lg text-gray-500 font-normal\">/month</span></div>\n                <ul className=\"space-y-3 mb-8\">\n                  <li className=\"flex items-center\"><CheckCircle className=\"w-5 h-5 text-green-500 mr-3\" />Up to 1 classroom</li>\n                  <li className=\"flex items-center\"><CheckCircle className=\"w-5 h-5 text-green-500 mr-3\" />10 students per classroom</li>\n                  <li className=\"flex items-center\"><CheckCircle className=\"w-5 h-5 text-green-500 mr-3\" />Basic AI tutoring</li>\n                  <li className=\"flex items-center\"><CheckCircle className=\"w-5 h-5 text-green-500 mr-3\" />Document upload</li>\n                </ul>\n                <Button variant=\"outline\" className=\"w-full\">Get Started</Button>\n              </CardContent>\n            </Card>\n\n            <Card className=\"border-2 border-blue-200 relative\">\n              <div className=\"absolute -top-3 left-1/2 transform -translate-x-1/2\">\n                <span className=\"bg-blue-600 text-white px-4 py-1 rounded-full text-sm font-medium\">Most Popular</span>\n              </div>\n              <CardContent className=\"p-8\">\n                <h3 className=\"text-2xl font-bold mb-2\">Pro</h3>\n                <div className=\"text-4xl font-bold mb-6\">$29<span className=\"text-lg text-gray-500 font-normal\">/month</span></div>\n                <ul className=\"space-y-3 mb-8\">\n                  <li className=\"flex items-center\"><CheckCircle className=\"w-5 h-5 text-green-500 mr-3\" />Unlimited classrooms</li>\n                  <li className=\"flex items-center\"><CheckCircle className=\"w-5 h-5 text-green-500 mr-3\" />100 students per classroom</li>\n                  <li className=\"flex items-center\"><CheckCircle className=\"w-5 h-5 text-green-500 mr-3\" />Advanced AI features</li>\n                  <li className=\"flex items-center\"><CheckCircle className=\"w-5 h-5 text-green-500 mr-3\" />Analytics dashboard</li>\n                </ul>\n                <Button className=\"w-full bg-blue-600 hover:bg-blue-700\">Start Free Trial</Button>\n              </CardContent>\n            </Card>\n\n            <Card className=\"border-2\">\n              <CardContent className=\"p-8\">\n                <h3 className=\"text-2xl font-bold mb-2\">Enterprise</h3>\n                <div className=\"text-4xl font-bold mb-6\">Custom</div>\n                <ul className=\"space-y-3 mb-8\">\n                  <li className=\"flex items-center\"><CheckCircle className=\"w-5 h-5 text-green-500 mr-3\" />Unlimited everything</li>\n                  <li className=\"flex items-center\"><CheckCircle className=\"w-5 h-5 text-green-500 mr-3\" />SSO integration</li>\n                  <li className=\"flex items-center\"><CheckCircle className=\"w-5 h-5 text-green-500 mr-3\" />Custom deployment</li>\n                  <li className=\"flex items-center\"><CheckCircle className=\"w-5 h-5 text-green-500 mr-3\" />Priority support</li>\n                </ul>\n                <Button variant=\"outline\" className=\"w-full\">Contact Sales</Button>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* Demo Section */}\n      <section id=\"demo\" className=\"py-20 bg-white\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <h2 className=\"text-3xl lg:text-4xl font-bold text-gray-900 mb-4\">\n            Experience JIGYASA.AI in Action\n          </h2>\n          <p className=\"text-xl text-gray-600 mb-8\">\n            See how our AI tutor adapts to different grade levels and uses the Socratic method\n          </p>\n          <Button \n            size=\"lg\"\n            className=\"bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-lg px-8 py-4\"\n            onClick={() => window.location.href = '/api/login'}\n          >\n            Try Interactive Demo\n            <ArrowRight className=\"ml-2 w-5 h-5\" />\n          </Button>\n        </div>\n      </section>\n\n      {/* About Section */}\n      <section id=\"about\" className=\"py-20 bg-gray-50\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl lg:text-4xl font-bold text-gray-900 mb-4\">\n              About JIGYASA.AI\n            </h2>\n            <p className=\"text-xl text-gray-600\">\n              Building the future of personalized education through responsible AI\n            </p>\n          </div>\n          \n          <div className=\"prose prose-lg mx-auto text-gray-700\">\n            <p>\n              JIGYASA.AI represents a breakthrough in educational technology, combining cutting-edge artificial intelligence \n              with proven pedagogical methods. Our platform is designed specifically for K-12 education, ensuring that \n              every interaction is safe, age-appropriate, and educationally valuable.\n            </p>\n            \n            <p>\n              By implementing the Socratic method through AI, we help students develop critical thinking skills rather \n              than just providing answers. Our grade-adaptive technology ensures that conversations are always at the \n              right level of complexity, while our \"walled garden\" approach gives teachers complete control over the \n              knowledge base their students can access.\n            </p>\n\n            <p>\n              Built by educators, for educators, JIGYASA.AI is more than just an AI chatbot – it's a comprehensive \n              learning platform that empowers both students and teachers to achieve better educational outcomes.\n            </p>\n          </div>\n        </div>\n      </section>\n\n      {/* Contact Section */}\n      <section id=\"contact\" className=\"py-20 bg-white\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <h2 className=\"text-3xl lg:text-4xl font-bold text-gray-900 mb-4\">\n            Ready to Transform Learning?\n          </h2>\n          <p className=\"text-xl text-gray-600 mb-8\">\n            Join thousands of educators already using JIGYASA.AI in their classrooms\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Button \n              size=\"lg\"\n              className=\"bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-lg px-8 py-4\"\n              onClick={() => setShowLogin(true)}\n              data-testid=\"button-get-started-now\"\n            >\n              Get Started Now\n              <ArrowRight className=\"ml-2 w-5 h-5\" />\n            </Button>\n            <Button \n              variant=\"outline\" \n              size=\"lg\"\n              className=\"text-lg px-8 py-4\"\n            >\n              Contact Sales\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"bg-gray-900 text-white py-12\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex flex-col md:flex-row items-center justify-between\">\n            <div className=\"flex items-center space-x-3 mb-4 md:mb-0\">\n              <div className=\"w-8 h-8 bg-gradient-to-br from-blue-600 to-purple-600 rounded-lg flex items-center justify-center\">\n                <Brain className=\"text-white w-5 h-5\" />\n              </div>\n              <div>\n                <div className=\"font-bold\">JIGYASA.AI</div>\n                <div className=\"text-sm text-gray-400\">Artificial Intelligence that builds Real Intelligence</div>\n              </div>\n            </div>\n            <div className=\"text-sm text-gray-400\">\n              © 2025 JIGYASA.AI. Built with ❤️ for education.\n            </div>\n          </div>\n        </div>\n      </footer>\n      \n      <LoginModal isOpen={showLogin} onClose={() => setShowLogin(false)} />\n    </div>\n  );\n}","size_bytes":21956},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/student-dashboard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { \n  BookOpen, \n  MessageSquare, \n  Plus, \n  Users, \n  LogOut,\n  Send,\n  Brain,\n  Sparkles,\n  Clock\n} from \"lucide-react\";\nimport type { Classroom, ChatMessage } from \"@shared/schema\";\n\nexport default function StudentDashboard() {\n  const { toast } = useToast();\n  const [inviteCode, setInviteCode] = useState(\"\");\n  const [selectedClassroom, setSelectedClassroom] = useState<string>(\"\");\n  const [currentMessage, setCurrentMessage] = useState(\"\");\n  const [currentSessionId, setCurrentSessionId] = useState<string>(\"\");\n  const [messages, setMessages] = useState<ChatMessage[]>([]);\n\n  // Get user's classrooms\n  const { data: classroomsData, isLoading: classroomsLoading } = useQuery({\n    queryKey: [\"/api/classrooms\"],\n  });\n\n  // Get chat sessions for selected classroom\n  const { data: sessionsData } = useQuery({\n    queryKey: [\"/api/classrooms\", selectedClassroom, \"sessions\"],\n    enabled: !!selectedClassroom,\n  });\n\n  // Get messages for current session\n  useEffect(() => {\n    if (currentSessionId) {\n      queryClient.fetchQuery({\n        queryKey: [\"/api/sessions\", currentSessionId, \"messages\"],\n      }).then((data: any) => {\n        setMessages(data?.messages || []);\n      }).catch(console.error);\n    }\n  }, [currentSessionId]);\n\n  // Join classroom mutation\n  const joinClassroomMutation = useMutation({\n    mutationFn: async (code: string) => {\n      return await apiRequest(\"/api/classrooms/join\", \"POST\", { inviteCode: code });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Successfully joined classroom!\",\n      });\n      setInviteCode(\"\");\n      queryClient.invalidateQueries({ queryKey: [\"/api/classrooms\"] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error instanceof Error ? error.message : \"Failed to join classroom\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Send message mutation\n  const sendMessageMutation = useMutation({\n    mutationFn: async (messageData: { message: string; classroomId: string; sessionId?: string }) => {\n      return await apiRequest(\"/api/chat\", \"POST\", messageData);\n    },\n    onSuccess: (data: any) => {\n      setCurrentSessionId(data.sessionId);\n      // Refresh messages\n      queryClient.fetchQuery({\n        queryKey: [\"/api/sessions\", data.sessionId, \"messages\"],\n      }).then((messagesData: any) => {\n        setMessages(messagesData?.messages || []);\n      });\n      setCurrentMessage(\"\");\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error instanceof Error ? error.message : \"Failed to send message\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleJoinClassroom = () => {\n    if (inviteCode.trim()) {\n      joinClassroomMutation.mutate(inviteCode.trim().toUpperCase());\n    }\n  };\n\n  const handleSendMessage = () => {\n    if (currentMessage.trim() && selectedClassroom) {\n      sendMessageMutation.mutate({\n        message: currentMessage.trim(),\n        classroomId: selectedClassroom,\n        sessionId: currentSessionId || undefined,\n      });\n    }\n  };\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      return await apiRequest('/api/logout', 'POST');\n    },\n    onSuccess: () => {\n      window.location.href = '/';\n    },\n    onError: (error) => {\n      toast({\n        title: \"Logout Failed\",\n        description: error instanceof Error ? error.message : \"Failed to logout\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleLogout = () => {\n    logoutMutation.mutate();\n  };\n\n  const classrooms: Classroom[] = (classroomsData as any)?.classrooms || [];\n  const sessions = (sessionsData as any)?.sessions || [];\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50\">\n      {/* Header */}\n      <header className=\"bg-white/80 backdrop-blur-md border-b border-gray-200 sticky top-0 z-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center justify-between h-16\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-10 h-10 bg-gradient-to-br from-blue-600 to-purple-600 rounded-xl flex items-center justify-center\">\n                <Brain className=\"text-white w-6 h-6\" />\n              </div>\n              <div>\n                <h1 className=\"text-xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">\n                  JIGYASA.AI\n                </h1>\n                <p className=\"text-xs text-gray-600\">Student Dashboard</p>\n              </div>\n            </div>\n            <Button\n              variant=\"outline\"\n              onClick={handleLogout}\n              disabled={logoutMutation.isPending}\n              data-testid=\"button-logout\"\n            >\n              <LogOut className=\"w-4 h-4 mr-2\" />\n              Sign Out\n            </Button>\n          </div>\n        </div>\n      </header>\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"grid lg:grid-cols-4 gap-8\">\n          {/* Sidebar - Classrooms */}\n          <div className=\"lg:col-span-1\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <BookOpen className=\"w-5 h-5 mr-2\" />\n                  My Classrooms\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {/* Join Classroom */}\n                <div className=\"space-y-2\">\n                  <Input\n                    placeholder=\"Enter invite code\"\n                    value={inviteCode}\n                    onChange={(e) => setInviteCode(e.target.value)}\n                    data-testid=\"input-invite-code\"\n                  />\n                  <Button \n                    onClick={handleJoinClassroom}\n                    disabled={!inviteCode.trim() || joinClassroomMutation.isPending}\n                    className=\"w-full\"\n                    size=\"sm\"\n                    data-testid=\"button-join-classroom\"\n                  >\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    {joinClassroomMutation.isPending ? \"Joining...\" : \"Join Classroom\"}\n                  </Button>\n                </div>\n\n                <Separator />\n\n                {/* Classroom List */}\n                {classroomsLoading ? (\n                  <div className=\"text-sm text-gray-500\">Loading classrooms...</div>\n                ) : classrooms.length === 0 ? (\n                  <div className=\"text-sm text-gray-500 text-center py-4\">\n                    No classrooms yet. Join one using an invite code!\n                  </div>\n                ) : (\n                  <div className=\"space-y-2\">\n                    {classrooms.map((classroom) => (\n                      <div\n                        key={classroom.id}\n                        className={`p-3 rounded-lg border cursor-pointer transition-colors ${\n                          selectedClassroom === classroom.id\n                            ? 'bg-blue-50 border-blue-200'\n                            : 'hover:bg-gray-50 border-gray-200'\n                        }`}\n                        onClick={() => {\n                          setSelectedClassroom(classroom.id);\n                          setCurrentSessionId(\"\");\n                          setMessages([]);\n                        }}\n                        data-testid={`classroom-${classroom.id}`}\n                      >\n                        <div className=\"font-medium text-sm\">{classroom.name}</div>\n                        <div className=\"text-xs text-gray-500\">\n                          Grade {classroom.gradeLevel}\n                          {classroom.subject && ` • ${classroom.subject}`}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Chat Sessions */}\n            {selectedClassroom && (\n              <Card className=\"mt-4\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center text-sm\">\n                    <Clock className=\"w-4 h-4 mr-2\" />\n                    Recent Sessions\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {sessions.length === 0 ? (\n                    <div className=\"text-xs text-gray-500 text-center py-2\">\n                      Start a new conversation\n                    </div>\n                  ) : (\n                    <div className=\"space-y-2\">\n                      {sessions.slice(0, 5).map((session: any) => (\n                        <div\n                          key={session.id}\n                          className={`p-2 rounded text-xs cursor-pointer transition-colors ${\n                            currentSessionId === session.id\n                              ? 'bg-purple-50 border border-purple-200'\n                              : 'hover:bg-gray-50'\n                          }`}\n                          onClick={() => setCurrentSessionId(session.id)}\n                          data-testid={`session-${session.id}`}\n                        >\n                          {session.title || `Session ${String(session.id).slice(-6)}`}\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            )}\n          </div>\n\n          {/* Main Chat Area */}\n          <div className=\"lg:col-span-3\">\n            {!selectedClassroom ? (\n              <Card className=\"h-[600px] flex items-center justify-center\">\n                <CardContent className=\"text-center\">\n                  <Sparkles className=\"w-16 h-16 mx-auto mb-4 text-gray-400\" />\n                  <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n                    Welcome to JIGYASA.AI\n                  </h3>\n                  <p className=\"text-gray-600\">\n                    Select a classroom to start learning with your AI tutor\n                  </p>\n                </CardContent>\n              </Card>\n            ) : (\n              <Card className=\"h-[600px] flex flex-col\">\n                <CardHeader className=\"flex-shrink-0 border-b\">\n                  <div className=\"flex items-center justify-between\">\n                    <CardTitle className=\"flex items-center\">\n                      <MessageSquare className=\"w-5 h-5 mr-2\" />\n                      AI Tutor Chat\n                    </CardTitle>\n                    <Badge variant=\"secondary\" className=\"bg-gradient-to-r from-blue-100 to-purple-100\">\n                      {classrooms.find(c => c.id === selectedClassroom)?.name}\n                    </Badge>\n                  </div>\n                </CardHeader>\n\n                {/* Messages */}\n                <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n                  {messages.length === 0 ? (\n                    <div className=\"text-center py-12\">\n                      <Brain className=\"w-12 h-12 mx-auto mb-4 text-gray-400\" />\n                      <p className=\"text-gray-600 mb-2\">\n                        Start a conversation with your AI tutor\n                      </p>\n                      <p className=\"text-sm text-gray-500\">\n                        Ask questions about your curriculum materials and get personalized help!\n                      </p>\n                    </div>\n                  ) : (\n                    messages.map((message) => (\n                      <div\n                        key={message.id}\n                        className={`flex ${message.role === 'user' ? 'justify-end' : 'justify-start'}`}\n                      >\n                        <div\n                          className={`max-w-[80%] px-4 py-3 rounded-lg ${\n                            message.role === 'user'\n                              ? 'bg-blue-600 text-white'\n                              : 'bg-gray-100 text-gray-800'\n                          }`}\n                        >\n                          {message.role === 'assistant' && (\n                            <div className=\"flex items-center mb-2\">\n                              <Brain className=\"w-4 h-4 mr-2 text-purple-600\" />\n                              <span className=\"text-xs font-medium text-purple-600\">\n                                JIGYASA.AI\n                              </span>\n                            </div>\n                          )}\n                          <p className=\"text-sm whitespace-pre-wrap\">{message.content}</p>\n                          {message.role === 'assistant' && message.citations && (\n                            <div className=\"mt-2 pt-2 border-t border-gray-200\">\n                              <p className=\"text-xs text-gray-600\">\n                                📚 Sources referenced in this response\n                              </p>\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    ))\n                  )}\n\n                  {sendMessageMutation.isPending && (\n                    <div className=\"flex justify-start\">\n                      <div className=\"bg-gray-100 px-4 py-3 rounded-lg\">\n                        <div className=\"flex items-center space-x-2\">\n                          <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-pulse\"></div>\n                          <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-pulse\" style={{ animationDelay: '0.2s' }}></div>\n                          <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-pulse\" style={{ animationDelay: '0.4s' }}></div>\n                          <span className=\"text-sm text-gray-600 ml-2\">AI is thinking...</span>\n                        </div>\n                      </div>\n                    </div>\n                  )}\n                </div>\n\n                {/* Message Input */}\n                <div className=\"flex-shrink-0 border-t p-4\">\n                  <div className=\"flex space-x-2\">\n                    <Input\n                      placeholder=\"Ask your AI tutor a question...\"\n                      value={currentMessage}\n                      onChange={(e) => setCurrentMessage(e.target.value)}\n                      onKeyPress={(e) => {\n                        if (e.key === 'Enter' && !e.shiftKey) {\n                          e.preventDefault();\n                          handleSendMessage();\n                        }\n                      }}\n                      disabled={sendMessageMutation.isPending}\n                      data-testid=\"input-chat-message\"\n                    />\n                    <Button\n                      onClick={handleSendMessage}\n                      disabled={!currentMessage.trim() || sendMessageMutation.isPending}\n                      data-testid=\"button-send-message\"\n                    >\n                      <Send className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                  <p className=\"text-xs text-gray-500 mt-2\">\n                    Press Enter to send, Shift+Enter for new line\n                  </p>\n                </div>\n              </Card>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":16582},"client/src/pages/teacher-dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { \n  BookOpen, \n  Users, \n  Plus, \n  Upload, \n  Copy, \n  LogOut,\n  GraduationCap,\n  FileText,\n  Sparkles,\n  Brain\n} from \"lucide-react\";\nimport type { Classroom, Document } from \"@shared/schema\";\n\nexport default function TeacherDashboard() {\n  const { toast } = useToast();\n  const [selectedClassroom, setSelectedClassroom] = useState<string>(\"\");\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [newClassroom, setNewClassroom] = useState({\n    name: \"\",\n    description: \"\",\n    gradeLevel: \"\",\n    subject: \"\"\n  });\n\n  // Get teacher's classrooms\n  const { data: classroomsData, isLoading: classroomsLoading } = useQuery({\n    queryKey: [\"/api/classrooms\"],\n  });\n\n  // Get documents for selected classroom\n  const { data: documentsData, isLoading: documentsLoading } = useQuery({\n    queryKey: [\"/api/classrooms\", selectedClassroom, \"documents\"],\n    enabled: !!selectedClassroom,\n  });\n\n  // Create classroom mutation\n  const createClassroomMutation = useMutation({\n    mutationFn: async (classroomData: any) => {\n      return await apiRequest(\"/api/classrooms\", \"POST\", {\n        ...classroomData,\n        gradeLevel: parseInt(classroomData.gradeLevel)\n      });\n    },\n    onSuccess: (data: any) => {\n      toast({\n        title: \"Success\",\n        description: \"Classroom created successfully!\",\n      });\n      setIsCreateDialogOpen(false);\n      setNewClassroom({ name: \"\", description: \"\", gradeLevel: \"\", subject: \"\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/classrooms\"] });\n      \n      // Show invite code\n      toast({\n        title: \"Invite Code Generated\",\n        description: `Share code \"${data.classroom.inviteCode}\" with your students`,\n        duration: 5000,\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error instanceof Error ? error.message : \"Failed to create classroom\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Upload document mutation\n  const uploadDocumentMutation = useMutation({\n    mutationFn: async (file: File) => {\n      const formData = new FormData();\n      formData.append('file', file);\n      \n      const response = await fetch(`/api/classrooms/${selectedClassroom}/documents`, {\n        method: 'POST',\n        body: formData,\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Upload failed');\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Document uploaded successfully!\",\n      });\n      queryClient.invalidateQueries({ \n        queryKey: [\"/api/classrooms\", selectedClassroom, \"documents\"] \n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error instanceof Error ? error.message : \"Failed to upload document\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCreateClassroom = () => {\n    if (newClassroom.name && newClassroom.gradeLevel) {\n      createClassroomMutation.mutate(newClassroom);\n    }\n  };\n\n  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file && selectedClassroom) {\n      if (file.type !== 'application/pdf') {\n        toast({\n          title: \"Error\",\n          description: \"Only PDF files are supported\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n      if (file.size > 10 * 1024 * 1024) {\n        toast({\n          title: \"Error\",\n          description: \"File size must be less than 10MB\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n      uploadDocumentMutation.mutate(file);\n    }\n  };\n\n  const copyInviteCode = (inviteCode: string) => {\n    navigator.clipboard.writeText(inviteCode);\n    toast({\n      title: \"Copied\",\n      description: \"Invite code copied to clipboard\",\n    });\n  };\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      return await apiRequest('/api/logout', 'POST');\n    },\n    onSuccess: () => {\n      window.location.href = '/';\n    },\n    onError: (error) => {\n      toast({\n        title: \"Logout Failed\",\n        description: error instanceof Error ? error.message : \"Failed to logout\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleLogout = () => {\n    logoutMutation.mutate();\n  };\n\n  const classrooms: Classroom[] = (classroomsData as any)?.classrooms || [];\n  const documents: Document[] = (documentsData as any)?.documents || [];\n  const selectedClassroomData = classrooms.find(c => c.id === selectedClassroom);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50\">\n      {/* Header */}\n      <header className=\"bg-white/80 backdrop-blur-md border-b border-gray-200 sticky top-0 z-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center justify-between h-16\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-10 h-10 bg-gradient-to-br from-blue-600 to-purple-600 rounded-xl flex items-center justify-center\">\n                <Brain className=\"text-white w-6 h-6\" />\n              </div>\n              <div>\n                <h1 className=\"text-xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">\n                  JIGYASA.AI\n                </h1>\n                <p className=\"text-xs text-gray-600\">Teacher Dashboard</p>\n              </div>\n            </div>\n            <Button\n              variant=\"outline\"\n              onClick={handleLogout}\n              disabled={logoutMutation.isPending}\n              data-testid=\"button-logout\"\n            >\n              <LogOut className=\"w-4 h-4 mr-2\" />\n              Sign Out\n            </Button>\n          </div>\n        </div>\n      </header>\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"grid lg:grid-cols-4 gap-8\">\n          {/* Sidebar - Classrooms */}\n          <div className=\"lg:col-span-1\">\n            <Card>\n              <CardHeader className=\"pb-3\">\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle className=\"flex items-center text-lg\">\n                    <GraduationCap className=\"w-5 h-5 mr-2\" />\n                    My Classrooms\n                  </CardTitle>\n                  <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n                    <DialogTrigger asChild>\n                      <Button size=\"sm\" data-testid=\"button-create-classroom\">\n                        <Plus className=\"w-4 h-4\" />\n                      </Button>\n                    </DialogTrigger>\n                    <DialogContent>\n                      <DialogHeader>\n                        <DialogTitle>Create New Classroom</DialogTitle>\n                      </DialogHeader>\n                      <div className=\"space-y-4\">\n                        <Input\n                          placeholder=\"Classroom name\"\n                          value={newClassroom.name}\n                          onChange={(e) => setNewClassroom({ ...newClassroom, name: e.target.value })}\n                          data-testid=\"input-classroom-name\"\n                        />\n                        <Textarea\n                          placeholder=\"Description (optional)\"\n                          value={newClassroom.description}\n                          onChange={(e) => setNewClassroom({ ...newClassroom, description: e.target.value })}\n                          data-testid=\"input-classroom-description\"\n                        />\n                        <Select \n                          value={newClassroom.gradeLevel} \n                          onValueChange={(value) => setNewClassroom({ ...newClassroom, gradeLevel: value })}\n                        >\n                          <SelectTrigger data-testid=\"select-grade-level\">\n                            <SelectValue placeholder=\"Select grade level\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"1\">Grade 1</SelectItem>\n                            <SelectItem value=\"2\">Grade 2</SelectItem>\n                            <SelectItem value=\"3\">Grade 3</SelectItem>\n                            <SelectItem value=\"4\">Grade 4</SelectItem>\n                            <SelectItem value=\"5\">Grade 5</SelectItem>\n                            <SelectItem value=\"6\">Grade 6</SelectItem>\n                            <SelectItem value=\"7\">Grade 7</SelectItem>\n                            <SelectItem value=\"8\">Grade 8</SelectItem>\n                            <SelectItem value=\"9\">Grade 9</SelectItem>\n                            <SelectItem value=\"10\">Grade 10</SelectItem>\n                            <SelectItem value=\"11\">Grade 11</SelectItem>\n                            <SelectItem value=\"12\">Grade 12</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <Input\n                          placeholder=\"Subject (optional)\"\n                          value={newClassroom.subject}\n                          onChange={(e) => setNewClassroom({ ...newClassroom, subject: e.target.value })}\n                          data-testid=\"input-classroom-subject\"\n                        />\n                        <Button \n                          onClick={handleCreateClassroom}\n                          disabled={!newClassroom.name || !newClassroom.gradeLevel || createClassroomMutation.isPending}\n                          className=\"w-full\"\n                          data-testid=\"button-save-classroom\"\n                        >\n                          {createClassroomMutation.isPending ? \"Creating...\" : \"Create Classroom\"}\n                        </Button>\n                      </div>\n                    </DialogContent>\n                  </Dialog>\n                </div>\n              </CardHeader>\n              <CardContent className=\"space-y-2\">\n                {classroomsLoading ? (\n                  <div className=\"text-sm text-gray-500\">Loading classrooms...</div>\n                ) : classrooms.length === 0 ? (\n                  <div className=\"text-sm text-gray-500 text-center py-4\">\n                    No classrooms yet. Create one to get started!\n                  </div>\n                ) : (\n                  classrooms.map((classroom) => (\n                    <div\n                      key={classroom.id}\n                      className={`p-3 rounded-lg border cursor-pointer transition-colors ${\n                        selectedClassroom === classroom.id\n                          ? 'bg-blue-50 border-blue-200'\n                          : 'hover:bg-gray-50 border-gray-200'\n                      }`}\n                      onClick={() => setSelectedClassroom(classroom.id)}\n                      data-testid={`classroom-${classroom.id}`}\n                    >\n                      <div className=\"font-medium text-sm\">{classroom.name}</div>\n                      <div className=\"text-xs text-gray-500 mb-2\">\n                        Grade {classroom.gradeLevel}\n                        {classroom.subject && ` • ${classroom.subject}`}\n                      </div>\n                      <div className=\"flex items-center justify-between\">\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          {classroom.inviteCode}\n                        </Badge>\n                        <Button\n                          size=\"sm\"\n                          variant=\"ghost\"\n                          onClick={(e) => {\n                            e.stopPropagation();\n                            copyInviteCode(classroom.inviteCode!);\n                          }}\n                          className=\"h-6 w-6 p-0\"\n                          data-testid={`button-copy-code-${classroom.id}`}\n                        >\n                          <Copy className=\"w-3 h-3\" />\n                        </Button>\n                      </div>\n                    </div>\n                  ))\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Main Content Area */}\n          <div className=\"lg:col-span-3\">\n            {!selectedClassroom ? (\n              <Card className=\"h-[600px] flex items-center justify-center\">\n                <CardContent className=\"text-center\">\n                  <Sparkles className=\"w-16 h-16 mx-auto mb-4 text-gray-400\" />\n                  <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n                    Welcome to Your Teacher Dashboard\n                  </h3>\n                  <p className=\"text-gray-600 mb-4\">\n                    Create or select a classroom to manage curriculum materials\n                  </p>\n                  <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n                    <DialogTrigger asChild>\n                      <Button className=\"bg-gradient-to-r from-blue-600 to-purple-600\">\n                        <Plus className=\"w-4 h-4 mr-2\" />\n                        Create Your First Classroom\n                      </Button>\n                    </DialogTrigger>\n                  </Dialog>\n                </CardContent>\n              </Card>\n            ) : (\n              <div className=\"space-y-6\">\n                {/* Classroom Header */}\n                <Card>\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">\n                          {selectedClassroomData?.name}\n                        </h2>\n                        <div className=\"flex items-center space-x-4 text-sm text-gray-600\">\n                          <span>Grade {selectedClassroomData?.gradeLevel}</span>\n                          {selectedClassroomData?.subject && (\n                            <span>• {selectedClassroomData.subject}</span>\n                          )}\n                          <span>• Code: <code className=\"bg-gray-100 px-2 py-1 rounded\">{selectedClassroomData?.inviteCode}</code></span>\n                        </div>\n                        {selectedClassroomData?.description && (\n                          <p className=\"text-gray-600 mt-2\">{selectedClassroomData.description}</p>\n                        )}\n                      </div>\n                      <Button\n                        onClick={() => copyInviteCode(selectedClassroomData?.inviteCode!)}\n                        variant=\"outline\"\n                        data-testid=\"button-copy-invite-code\"\n                      >\n                        <Copy className=\"w-4 h-4 mr-2\" />\n                        Copy Invite Code\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Document Management */}\n                <Card>\n                  <CardHeader>\n                    <div className=\"flex items-center justify-between\">\n                      <CardTitle className=\"flex items-center\">\n                        <FileText className=\"w-5 h-5 mr-2\" />\n                        Curriculum Materials\n                      </CardTitle>\n                      <div>\n                        <input\n                          type=\"file\"\n                          accept=\".pdf\"\n                          onChange={handleFileUpload}\n                          className=\"hidden\"\n                          id=\"file-upload\"\n                          disabled={uploadDocumentMutation.isPending}\n                        />\n                        <Button\n                          onClick={() => document.getElementById('file-upload')?.click()}\n                          disabled={uploadDocumentMutation.isPending}\n                          data-testid=\"button-upload-document\"\n                        >\n                          <Upload className=\"w-4 h-4 mr-2\" />\n                          {uploadDocumentMutation.isPending ? \"Uploading...\" : \"Upload PDF\"}\n                        </Button>\n                      </div>\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    {documentsLoading ? (\n                      <div className=\"text-center py-8 text-gray-500\">\n                        Loading documents...\n                      </div>\n                    ) : documents.length === 0 ? (\n                      <div className=\"text-center py-12\">\n                        <BookOpen className=\"w-12 h-12 mx-auto mb-4 text-gray-400\" />\n                        <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n                          No curriculum materials yet\n                        </h3>\n                        <p className=\"text-gray-600 mb-4\">\n                          Upload PDF documents to create a safe knowledge base for your AI tutor\n                        </p>\n                        <Button\n                          onClick={() => document.getElementById('file-upload')?.click()}\n                          className=\"bg-gradient-to-r from-blue-600 to-purple-600\"\n                        >\n                          <Upload className=\"w-4 h-4 mr-2\" />\n                          Upload First Document\n                        </Button>\n                      </div>\n                    ) : (\n                      <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                        {documents.map((doc) => (\n                          <Card key={doc.id} className=\"border border-gray-200\">\n                            <CardContent className=\"p-4\">\n                              <div className=\"flex items-start space-x-3\">\n                                <FileText className=\"w-8 h-8 text-red-500 flex-shrink-0\" />\n                                <div className=\"flex-1 min-w-0\">\n                                  <h4 className=\"font-medium text-sm truncate\">{doc.name}</h4>\n                                  <p className=\"text-xs text-gray-500 mt-1\">\n                                    {(doc.size / 1024 / 1024).toFixed(1)} MB\n                                  </p>\n                                  <p className=\"text-xs text-gray-500\">\n                                    {new Date(doc.createdAt!).toLocaleDateString()}\n                                  </p>\n                                </div>\n                              </div>\n                            </CardContent>\n                          </Card>\n                        ))}\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n\n                {/* AI Safety Notice */}\n                <Card className=\"border-blue-200 bg-blue-50\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-start space-x-3\">\n                      <Brain className=\"w-6 h-6 text-blue-600 flex-shrink-0\" />\n                      <div>\n                        <h4 className=\"font-medium text-blue-900 mb-1\">AI Safety & Control</h4>\n                        <p className=\"text-sm text-blue-800\">\n                          JIGYASA.AI only uses the curriculum materials you upload as its knowledge base. \n                          Students can only access information from your approved documents, ensuring safe \n                          and curriculum-aligned learning experiences.\n                        </p>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":20892},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }","size_bytes":1127},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }","size_bytes":771},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"server/simpleAuth.ts":{"content":"import { Express, RequestHandler } from \"express\";\nimport session from \"express-session\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\nimport { USER_ROLES } from \"@shared/schema\";\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET || \"jigyasa-ai-secret-key-development\",\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: false, // Set to true in production with HTTPS\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n\n  // Simple login route for students\n  app.post(\"/api/login/student\", async (req, res) => {\n    try {\n      const { userId } = req.body;\n      \n      if (!userId) {\n        return res.status(400).json({ message: \"User ID is required\" });\n      }\n\n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      if (user.role !== USER_ROLES.STUDENT) {\n        return res.status(403).json({ message: \"Invalid user role for student login\" });\n      }\n\n      // Store user in session\n      (req.session as any).user = {\n        id: user.id,\n        email: user.email,\n        firstName: user.firstName,\n        lastName: user.lastName,\n        role: user.role,\n        gradeLevel: user.gradeLevel,\n      };\n\n      res.json({ \n        message: \"Login successful\", \n        user: {\n          id: user.id,\n          email: user.email,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          role: user.role,\n          gradeLevel: user.gradeLevel,\n        }\n      });\n    } catch (error) {\n      console.error(\"Student login error:\", error);\n      res.status(500).json({ message: \"Login failed\" });\n    }\n  });\n\n  // Simple login route for teachers\n  app.post(\"/api/login/teacher\", async (req, res) => {\n    try {\n      const { userId } = req.body;\n      \n      if (!userId) {\n        return res.status(400).json({ message: \"User ID is required\" });\n      }\n\n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      if (user.role !== USER_ROLES.TEACHER) {\n        return res.status(403).json({ message: \"Invalid user role for teacher login\" });\n      }\n\n      // Store user in session\n      (req.session as any).user = {\n        id: user.id,\n        email: user.email,\n        firstName: user.firstName,\n        lastName: user.lastName,\n        role: user.role,\n      };\n\n      res.json({ \n        message: \"Login successful\", \n        user: {\n          id: user.id,\n          email: user.email,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          role: user.role,\n        }\n      });\n    } catch (error) {\n      console.error(\"Teacher login error:\", error);\n      res.status(500).json({ message: \"Login failed\" });\n    }\n  });\n\n  // Logout route\n  app.post(\"/api/logout\", (req, res) => {\n    req.session.destroy((err) => {\n      if (err) {\n        return res.status(500).json({ message: \"Logout failed\" });\n      }\n      res.json({ message: \"Logout successful\" });\n    });\n  });\n\n  // Get current user route\n  app.get(\"/api/auth/user\", (req: any, res) => {\n    if (!req.session.user) {\n      return res.status(401).json({ message: \"Unauthorized\" });\n    }\n    res.json(req.session.user);\n  });\n}\n\n// Middleware to check if user is authenticated\nexport const isAuthenticated: RequestHandler = (req: any, res, next) => {\n  if (!req.session || !req.session.user) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n  req.user = req.session.user;\n  next();\n};\n\n// Middleware to check if user is a teacher\nexport const isTeacher: RequestHandler = (req: any, res, next) => {\n  if (!req.user || req.user.role !== USER_ROLES.TEACHER) {\n    return res.status(403).json({ message: \"Teacher access required\" });\n  }\n  next();\n};","size_bytes":4285},"client/src/components/LoginModal.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useState } from \"react\";\nimport { UserCircle, Award, X } from \"lucide-react\";\n\ninterface LoginModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport function LoginModal({ isOpen, onClose }: LoginModalProps) {\n  const [selectedUserId, setSelectedUserId] = useState('');\n  const [userType, setUserType] = useState<'student' | 'teacher'>('student');\n  const { toast } = useToast();\n\n  const loginMutation = useMutation({\n    mutationFn: async ({ userId, type }: { userId: string; type: 'student' | 'teacher' }) => {\n      return await apiRequest(`/api/login/${type}`, 'POST', { userId });\n    },\n    onSuccess: () => {\n      window.location.reload();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Login Failed\",\n        description: error instanceof Error ? error.message : \"Failed to login\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleLogin = () => {\n    if (!selectedUserId) {\n      toast({\n        title: \"Select User\",\n        description: \"Please select a user to login as\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    loginMutation.mutate({ userId: selectedUserId, type: userType });\n  };\n\n  // Sample user data for selection\n  const sampleUsers = {\n    student: [\n      { id: 'student1', name: 'Emma Davis', grade: 5 },\n      { id: 'student2', name: 'Alex Wilson', grade: 8 },\n      { id: 'student3', name: 'Maya Patel', grade: 10 },\n      { id: 'student4', name: 'Noah Thompson', grade: 6 },\n      { id: 'student5', name: 'Zoe Martinez', grade: 9 },\n    ],\n    teacher: [\n      { id: 'teacher1', name: 'Sarah Johnson', subject: 'Mathematics' },\n      { id: 'teacher2', name: 'Michael Chen', subject: 'Science' },\n    ],\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n      <div className=\"bg-white rounded-lg shadow-xl max-w-md w-full mx-4\">\n        <div className=\"flex items-center justify-between p-6 border-b\">\n          <h2 className=\"text-xl font-semibold text-gray-900\">Sign In to JIGYASA.AI</h2>\n          <button\n            onClick={onClose}\n            className=\"text-gray-400 hover:text-gray-600 transition-colors\"\n            data-testid=\"button-close-login\"\n          >\n            <X className=\"w-5 h-5\" />\n          </button>\n        </div>\n        \n        <div className=\"p-6\">\n          <div className=\"space-y-4\">\n            <div>\n              <label className=\"text-sm font-medium text-gray-700 mb-2 block\">\n                I am a...\n              </label>\n              <div className=\"grid grid-cols-2 gap-3\">\n                <Button\n                  variant={userType === 'student' ? 'default' : 'outline'}\n                  onClick={() => {\n                    setUserType('student');\n                    setSelectedUserId('');\n                  }}\n                  className=\"flex items-center justify-center space-x-2 h-12\"\n                  data-testid=\"button-select-student\"\n                >\n                  <UserCircle className=\"w-5 h-5\" />\n                  <span>Student</span>\n                </Button>\n                <Button\n                  variant={userType === 'teacher' ? 'default' : 'outline'}\n                  onClick={() => {\n                    setUserType('teacher');\n                    setSelectedUserId('');\n                  }}\n                  className=\"flex items-center justify-center space-x-2 h-12\"\n                  data-testid=\"button-select-teacher\"\n                >\n                  <Award className=\"w-5 h-5\" />\n                  <span>Teacher</span>\n                </Button>\n              </div>\n            </div>\n\n            <div>\n              <label className=\"text-sm font-medium text-gray-700 mb-2 block\">\n                Select {userType === 'student' ? 'Student' : 'Teacher'} Account\n              </label>\n              <Select value={selectedUserId} onValueChange={setSelectedUserId}>\n                <SelectTrigger data-testid=\"select-user\">\n                  <SelectValue placeholder={`Choose a ${userType} account...`} />\n                </SelectTrigger>\n                <SelectContent>\n                  {sampleUsers[userType].map((user) => (\n                    <SelectItem key={user.id} value={user.id}>\n                      <div className=\"flex items-center space-x-2\">\n                        <span>{user.name}</span>\n                        <span className=\"text-sm text-gray-500\">\n                          {userType === 'student' ? `Grade ${(user as any).grade}` : (user as any).subject}\n                        </span>\n                      </div>\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n              <p className=\"text-sm text-blue-800\">\n                <strong>Demo Users:</strong> These are sample accounts for testing. \n                {userType === 'student' ? ' Students can join classrooms and chat with the AI tutor.' : ' Teachers can create classrooms and upload curriculum materials.'}\n              </p>\n            </div>\n\n            <Button\n              onClick={handleLogin}\n              disabled={!selectedUserId || loginMutation.isPending}\n              className=\"w-full bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700\"\n              data-testid=\"button-login\"\n            >\n              {loginMutation.isPending ? 'Signing In...' : 'Sign In'}\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":6026}},"version":1}